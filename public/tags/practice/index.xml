<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Practice on Nathanial L. McConnell</title>
    <link>http://www.nmcconnell.com/tags/practice/</link>
    <description>Recent content in Practice on Nathanial L. McConnell</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2016. All rights reserved.</copyright>
    <lastBuildDate>Thu, 03 Apr 2014 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://www.nmcconnell.com/tags/practice/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>A Ruby Primer: Exercise 1 -- A random number min-max detector</title>
      <link>http://www.nmcconnell.com/assignment/a-ruby-primer-exercise-2-a-random-number-min-max-detector/</link>
      <pubDate>Thu, 03 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>http://www.nmcconnell.com/assignment/a-ruby-primer-exercise-2-a-random-number-min-max-detector/</guid>
      <description>

&lt;p&gt;In this exercise, you will create a Ruby script to detect the minimum and maximum values from a collection of randomly generated numbers.&lt;/p&gt;

&lt;h3 id=&#34;specification:ad7459bb2fde040ae85c94aed473709a&#34;&gt;Specification&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;File Name:&lt;/strong&gt; &lt;em&gt;random-min-max.rb&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Input:&lt;/strong&gt; &lt;em&gt;Several numbers representing the minimum possible randomly generated number, the maximum possible randomly generated number, and the number of random numbers to generate.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Output:&lt;/strong&gt; &lt;em&gt;Several strings containing various prompts, the results of the minimum and maximum detected values from the randomly generated numbers, and all of the randomly generated numbers for verification purposes.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Methods Used:&lt;/strong&gt; &lt;em&gt;puts, print, gets, chomp, to_i, to_s (for integers), min, max, each&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Classes Used:&lt;/strong&gt; &lt;em&gt;Random&lt;/em&gt; &lt;a href=&#34;http://www.ruby-doc.org/core-2.1.1/Random.html&#34;&gt;Ruby documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;additional-notes:ad7459bb2fde040ae85c94aed473709a&#34;&gt;Additional Notes&lt;/h3&gt;

&lt;p&gt;One of the best ways to learn a new programming language is to explore the language reference and specification for yourself. Even experienced coders will often find hidden gems in a language&amp;rsquo;s documentation.&lt;/p&gt;

&lt;p&gt;In this exercise, you will be using the Random class from the Ruby core specification. You will also be using a loop. As we have not yet covered loops in this primer, here is some code that you will want to include in your Ruby script to accomplish the generation of random numbers.&lt;/p&gt;

&lt;p&gt;``` ruby Generating random numbers
while i &amp;lt; number_of_random_numbers.to_i
  random_numbers[i] = Random.random(minimum_possible_random_number).to_i..maximum_possible_random_number.to_i)
  i += 1
end&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
### Sample Output
``` text
Welcome to the Random Number Min-Max Detector by Disciples of Code

What is the lowest random number you would like to possibly generate? 24
What is the highest random number you would like to possibly generate? 42
How many random numbers (between 24 and 42 ) would you like to generate? 12

The maximum value of the random numbers generated is: 39
The minimum value of the random numbers generated is: 24

For verification, here are all of the randon numbers generated:
38 39 28 32 30 30 30 34 24 31 35 26

Thank you for using my program!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Give this exercise a try. A solution will be posted soon.&lt;/p&gt;

&lt;h3 id=&#34;a-ruby-primer:ad7459bb2fde040ae85c94aed473709a&#34;&gt;A Ruby Primer&lt;/h3&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/03/a-ruby-primer-part-1-setting-up-your-development-environment/&#34;&gt;Part 1&lt;/a&gt; of this primer, you can learn how to set up your development environment.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/03/a-ruby-primer-part-2-using-the-ruby-interactive-shell-irb/&#34;&gt;Part 2&lt;/a&gt; of this primer, you can explore using the Ruby Interactive Shell (IRB).&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/03/a-ruby-primer-part-3-ruby-scripts/&#34;&gt;Part 3&lt;/a&gt; of this primer, you can learn how to run Ruby programs (scripts).&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/03/a-ruby-primer-part-4-outputting-and-inputting-data/&#34;&gt;Part 4&lt;/a&gt; of this primer, you can learn how to output and input data, as well as how to do simple conversion of strings into integers and floats.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/03/a-ruby-primer-exercise-1-a-simple-command-line-calculator/&#34;&gt;Exercise 1&lt;/a&gt; of this primer, you can learn how to create a simple command line calculator.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/04/a-ruby-primer-part-5-strings/&#34;&gt;Part 5&lt;/a&gt; of this primer, you can learn about strings.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/04/a-ruby-primer-part-6-numbers/&#34;&gt;Part 6&lt;/a&gt; of this primer, you can learn about numbers.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/04/a-ruby-primer-part-7-booleans/&#34;&gt;Part 7&lt;/a&gt; of this primer, you can learn about booleans.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/04/a-ruby-primer-part-8-ranges/&#34;&gt;Part 8&lt;/a&gt; of this primer, you can learn about booleans.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/04/a-ruby-primer-part-9-arrays/&#34;&gt;Part 9&lt;/a&gt; of this primer, you can learn about arrays.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/04/a-ruby-primer-part-10-hashes/&#34;&gt;Part 10&lt;/a&gt; of this primer, you can learn about hashes.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/04/a-ruby-primer-part-11-variables-and-constants/&#34;&gt;Part 11&lt;/a&gt; of this primer, you can learn about variables and constants.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/04/a-ruby-primer-exercise-2-a-random-number-min-max-detector/&#34;&gt;Exercise 2&lt;/a&gt; of this primer, you can learn how to create a program to detect the minimum and maximum values from a collection of randomly generated numbers.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/06/a-ruby-primer-part-12-arithmetic-operators/&#34;&gt;Part 12&lt;/a&gt; of this primer, you can learn about arithmetic operators.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/07/a-ruby-primer-part-13-relational-operators/&#34;&gt;Part 13&lt;/a&gt; of this primer, you can learn about relational operators.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/07/a-ruby-primer-part-14-logical-operators/&#34;&gt;Part 14&lt;/a&gt; of this primer, you can learn about logical operators.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>A Ruby Primer: Exercise 1 -- A simple command line calculator</title>
      <link>http://www.nmcconnell.com/assignment/a-ruby-primer-exercise-1-a-simple-command-line-calculator/</link>
      <pubDate>Mon, 31 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>http://www.nmcconnell.com/assignment/a-ruby-primer-exercise-1-a-simple-command-line-calculator/</guid>
      <description>

&lt;p&gt;In this exercise, you will create a Ruby script for a simple command line calculator.&lt;/p&gt;

&lt;h3 id=&#34;specification:368c30966dfb1a110f74e1ea6c4b2f3c&#34;&gt;Specification&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;File Name:&lt;/strong&gt; &lt;em&gt;simple-calculator.rb&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Input:&lt;/strong&gt; &lt;em&gt;Several strings containing your name, the user&amp;rsquo;s name, integers, and floats.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Output:&lt;/strong&gt; &lt;em&gt;Several strings containing various prompts and the results of various arithmetic calculations.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Methods Used:&lt;/strong&gt; &lt;em&gt;puts, print, gets, to_i, to_f, to_s (for floats)&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;sample-output:368c30966dfb1a110f74e1ea6c4b2f3c&#34;&gt;Sample Output&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;Welcome to the Simple Calculator by Disciples of Code
Please enter your name: Clark Kent
Hello, Clark Kent
Let&#39;s try some addition!
Please enter a number to add: 1.55
Please enter another number to add: 4
The result of adding 1.55 plus 4 is: 5.55
Let&#39;s try some subtraction!
Please enter a number to subtract: 7.33
Please enter another number to subtract: 2.33
The result of subtracting 2.33 from 7.33 is: 5.0
Let&#39;s try some multiplication!
Please enter a number to multiply: 2
Please enter another number to multiply: 5.12
The result of multiplying 2 times 5.12 is: 10.24
Let&#39;s try some division!
Please enter a number to divide: 8.78
Please enter another number to divide: 2.2
The result of dividing 8.78 by 2.2 is: 3.9909090909090903
Thank you for using the Simple Calculator!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Give this exercise a try. A solution will be posted soon.&lt;/p&gt;

&lt;h3 id=&#34;a-ruby-primer:368c30966dfb1a110f74e1ea6c4b2f3c&#34;&gt;A Ruby Primer&lt;/h3&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/03/a-ruby-primer-part-1-setting-up-your-development-environment/&#34;&gt;Part 1&lt;/a&gt; of this primer, you can learn how to set up your development environment.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/03/a-ruby-primer-part-2-using-the-ruby-interactive-shell-irb/&#34;&gt;Part 2&lt;/a&gt; of this primer, you can explore using the Ruby Interactive Shell (IRB).&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/03/a-ruby-primer-part-3-ruby-scripts/&#34;&gt;Part 3&lt;/a&gt; of this primer, you can learn how to run Ruby programs (scripts).&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/03/a-ruby-primer-part-4-outputting-and-inputting-data/&#34;&gt;Part 4&lt;/a&gt; of this primer, you can learn how to output and input data, as well as how to do simple conversion of strings into integers and floats.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/03/a-ruby-primer-exercise-1-a-simple-command-line-calculator/&#34;&gt;Exercise 1&lt;/a&gt; of this primer, you can learn how to create a simple command line calculator.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/04/a-ruby-primer-part-5-strings/&#34;&gt;Part 5&lt;/a&gt; of this primer, you can learn about strings.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/04/a-ruby-primer-part-6-numbers/&#34;&gt;Part 6&lt;/a&gt; of this primer, you can learn about numbers.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/04/a-ruby-primer-part-7-booleans/&#34;&gt;Part 7&lt;/a&gt; of this primer, you can learn about booleans.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/04/a-ruby-primer-part-8-ranges/&#34;&gt;Part 8&lt;/a&gt; of this primer, you can learn about booleans.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/04/a-ruby-primer-part-9-arrays/&#34;&gt;Part 9&lt;/a&gt; of this primer, you can learn about arrays.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/04/a-ruby-primer-part-10-hashes/&#34;&gt;Part 10&lt;/a&gt; of this primer, you can learn about hashes.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/04/a-ruby-primer-part-11-variables-and-constants/&#34;&gt;Part 11&lt;/a&gt; of this primer, you can learn about variables and constants.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/04/a-ruby-primer-exercise-2-a-random-number-min-max-detector/&#34;&gt;Exercise 2&lt;/a&gt; of this primer, you can learn how to create a program to detect the minimum and maximum values from a collection of randomly generated numbers.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/06/a-ruby-primer-part-12-arithmetic-operators/&#34;&gt;Part 12&lt;/a&gt; of this primer, you can learn about arithmetic operators.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/07/a-ruby-primer-part-13-relational-operators/&#34;&gt;Part 13&lt;/a&gt; of this primer, you can learn about relational operators.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/07/a-ruby-primer-part-14-logical-operators/&#34;&gt;Part 14&lt;/a&gt; of this primer, you can learn about logical operators.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>A Ruby Primer, Part 2 -- Using the Ruby interactive shell IRB</title>
      <link>http://www.nmcconnell.com/lesson/a-ruby-primer-part-2-using-the-ruby-interactive-shell-irb/</link>
      <pubDate>Tue, 25 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>http://www.nmcconnell.com/lesson/a-ruby-primer-part-2-using-the-ruby-interactive-shell-irb/</guid>
      <description>

&lt;p&gt;If you have not yet set up your development environment, please refer to &lt;a href=&#34;{{ root_url }}/2014/03/a-ruby-primer-part-1-setting-up-your-development-environment/&#34;&gt;Part 1&lt;/a&gt; of this primer.&lt;/p&gt;

&lt;h3 id=&#34;using-irb:13a4833975b30c7ec5267d72bdd63db4&#34;&gt;Using IRB&lt;/h3&gt;

&lt;p&gt;The Ruby Interactive Shell, or IRB, provides a command line with which we can immediately evaluate a Ruby statement or expression. To load IRB, open a Terminal window (OS X or Linux) or a Command Prompt (Windows), and execute the following command.&lt;/p&gt;

&lt;p&gt;``` bash Loading IRB
$ irb&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
You should now be inside IRB, and should have a command prompt similar to the following.

``` irb IRB command prompt
irb(main):001:0&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In Ruby, a literal number evaluates to itself. (&lt;em&gt;Note that each line beginning with &amp;lsquo;irb(main)&amp;rsquo; is a command prompt, and each line beginning with &amp;lsquo;=&amp;gt;&amp;rsquo; is the resultant evaluation of the statement or expression to be evaluated.&lt;/em&gt;)&lt;/p&gt;

&lt;p&gt;``` irb Evaluation of a literal number
irb(main):001:0&amp;gt; 1
=&amp;gt; 1&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
An arithmetic expression evaluates to the result of the expression, taking into account order of precedence of arithmetic operators (more on this in future parts of the Ruby primer).

``` irb Evaluation of an arithmetic expression
irb(main):002:0&amp;gt; 1 + 2
=&amp;gt; 3
irb(main):003:0&amp;gt; 3 * 3
=&amp;gt; 9
irb(main):004:0&amp;gt; 1 + 2 * 3
=&amp;gt; 7
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Strings evaluate to themselves, and can be concatenated (using the &amp;lsquo;+&amp;rsquo; operator).&lt;/p&gt;

&lt;p&gt;``` irb Evaluation of a string
irb(main):005:0&amp;gt; &amp;ldquo;hello, world&amp;rdquo;
=&amp;gt; &amp;ldquo;hello, world&amp;rdquo;
irb(main):006:0&amp;gt; &amp;ldquo;hello, &amp;rdquo; + &amp;ldquo;world&amp;rdquo;
=&amp;gt; &amp;ldquo;hello, world&amp;rdquo;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
Data can be stored in variables (using the &#39;=&#39; operator, and the variable will evaluate to the contents of the variable.

``` irb Storing data in and evaluating variables
irb(main):007:0&amp;gt; greeting = &amp;quot;hello&amp;quot;
=&amp;gt; &amp;quot;hello&amp;quot;
irb(main):008:0&amp;gt; greeting
=&amp;gt; &amp;quot;hello&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Variables can be concatenated (again, using the &amp;lsquo;+&amp;rsquo; operator).&lt;/p&gt;

&lt;p&gt;``` irb Concatenating and evaluating variables
irb(main):009:0&amp;gt; greeting + &amp;ldquo;, world&amp;rdquo;
=&amp;gt; &amp;ldquo;hello, world&amp;rdquo;
irb(main):010:0&amp;gt; subject = &amp;ldquo;world&amp;rdquo;
=&amp;gt; &amp;ldquo;world&amp;rdquo;
irb(main):011:0&amp;gt; greeting + &amp;ldquo;, &amp;rdquo; + subject
=&amp;gt; &amp;ldquo;hello, world&amp;rdquo;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
Complex expressions can be evaluated. (Don&#39;t worry too much about what exactly is happening here, as it will be covered in-depth in future parts of this Ruby primer.)

``` irb Evaluating a complex expression
irb(main):012:0&amp;gt; i = 1
=&amp;gt; 1
irb(main):013:0&amp;gt; while i &amp;lt; 100
irb(main):014:1&amp;gt;   print i
irb(main):015:1&amp;gt;   i += 1
irb(main):016:1&amp;gt; end
123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899=&amp;gt; nil
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Functions can be defined and evaluated. (&lt;em&gt;Note that in Ruby, functions do not require a &amp;lsquo;return&amp;rsquo; statement, you can just have an expression. If that expression is the last statement, that is what will be returned.&lt;/em&gt;)&lt;/p&gt;

&lt;p&gt;``` irb Defining and evaluating functions
irb(main):017:0&amp;gt; def square(n)
irb(main):018:1&amp;gt;   return n * n
irb(main):019:1&amp;gt; end
=&amp;gt; nil
irb(main):020:0&amp;gt; square(2)
=&amp;gt; 4
irb(main):021:0&amp;gt; square(4)
=&amp;gt; 16
irb(main):022:0&amp;gt; def sum(num1, num2)
irb(main):023:1&amp;gt;   num1 + num2
irb(main):024:1&amp;gt; end
=&amp;gt; nil
irb(main):025:0&amp;gt; sum(1, 2)
=&amp;gt; 3&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
You can exit IRB by using the &#39;quit&#39; command, and will be returned to your regular command prompt.

``` irb Exiting IRB
irb(main):026:0&amp;gt; quit
$
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Congratulation! You have just gotten your feet wet using Ruby and the Ruby Interactive Shell (IRB).&lt;/p&gt;

&lt;h3 id=&#34;a-ruby-primer:13a4833975b30c7ec5267d72bdd63db4&#34;&gt;A Ruby Primer&lt;/h3&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/03/a-ruby-primer-part-1-setting-up-your-development-environment/&#34;&gt;Part 1&lt;/a&gt; of this primer, you can learn how to set up your development environment.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/03/a-ruby-primer-part-2-using-the-ruby-interactive-shell-irb/&#34;&gt;Part 2&lt;/a&gt; of this primer, you can explore using the Ruby Interactive Shell (IRB).&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/03/a-ruby-primer-part-3-ruby-scripts/&#34;&gt;Part 3&lt;/a&gt; of this primer, you can learn how to run Ruby programs (scripts).&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/03/a-ruby-primer-part-4-outputting-and-inputting-data/&#34;&gt;Part 4&lt;/a&gt; of this primer, you can learn how to output and input data, as well as how to do simple conversion of strings into integers and floats.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/03/a-ruby-primer-exercise-1-a-simple-command-line-calculator/&#34;&gt;Exercise 1&lt;/a&gt; of this primer, you can learn how to create a simple command line calculator.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/04/a-ruby-primer-part-5-strings/&#34;&gt;Part 5&lt;/a&gt; of this primer, you can learn about strings.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/04/a-ruby-primer-part-6-numbers/&#34;&gt;Part 6&lt;/a&gt; of this primer, you can learn about numbers.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/04/a-ruby-primer-part-7-booleans/&#34;&gt;Part 7&lt;/a&gt; of this primer, you can learn about booleans.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/04/a-ruby-primer-part-8-ranges/&#34;&gt;Part 8&lt;/a&gt; of this primer, you can learn about booleans.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/04/a-ruby-primer-part-9-arrays/&#34;&gt;Part 9&lt;/a&gt; of this primer, you can learn about arrays.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/04/a-ruby-primer-part-10-hashes/&#34;&gt;Part 10&lt;/a&gt; of this primer, you can learn about hashes.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/04/a-ruby-primer-part-11-variables-and-constants/&#34;&gt;Part 11&lt;/a&gt; of this primer, you can learn about variables and constants.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/04/a-ruby-primer-exercise-2-a-random-number-min-max-detector/&#34;&gt;Exercise 2&lt;/a&gt; of this primer, you can learn how to create a program to detect the minimum and maximum values from a collection of randomly generated numbers.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/06/a-ruby-primer-part-12-arithmetic-operators/&#34;&gt;Part 12&lt;/a&gt; of this primer, you can learn about arithmetic operators.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/07/a-ruby-primer-part-13-relational-operators/&#34;&gt;Part 13&lt;/a&gt; of this primer, you can learn about relational operators.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/07/a-ruby-primer-part-14-logical-operators/&#34;&gt;Part 14&lt;/a&gt; of this primer, you can learn about logical operators.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>A Ruby Primer, Part 1 -- Setting up your development environment</title>
      <link>http://www.nmcconnell.com/lesson/a-ruby-primer-part-1-setting-up-your-development-environment/</link>
      <pubDate>Mon, 24 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>http://www.nmcconnell.com/lesson/a-ruby-primer-part-1-setting-up-your-development-environment/</guid>
      <description>

&lt;p&gt;The first step to learning Ruby (or any programming language) is to set up your development environment, so let&amp;rsquo;s dive right in.&lt;/p&gt;

&lt;p&gt;The simplest method is to use a free, online development environment, such as those provided by &lt;a href=&#34;https://koding.com/R/nathanialmcconnell&#34;&gt;Koding.com&lt;/a&gt;. If you have already signed up for a &lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt; account (which is highly recommended for source control and for sharing your code), you can sign up for Koding.com using your GitHub account credentials. As part of our goal of collaborative learning, we will be using both Koding.com and GitHub in the future, but neither are required to be able to complete this Ruby primer.&lt;/p&gt;

&lt;h3 id=&#34;installing-ruby:800b85f81afa203f0da91299abf0d819&#34;&gt;Installing Ruby&lt;/h3&gt;

&lt;p&gt;The alternative to using an online development environment is to install Ruby on your local development machine (e.g. your desktop or laptop computer).&lt;/p&gt;

&lt;h4 id=&#34;installing-ruby-on-windows:800b85f81afa203f0da91299abf0d819&#34;&gt;Installing Ruby on Windows&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;The easiest way to install Ruby on Windows is by using the &lt;a href=&#34;http://rubyinstaller.org/&#34;&gt;RubyInstaller&lt;/a&gt;. We will be using Ruby 2.0.0-p451 (patch level 451 of Ruby version 2.0.0). Simply download the &lt;a href=&#34;http://dl.bintray.com/oneclick/rubyinstaller/rubyinstaller-2.0.0-p451.exe?direct&#34;&gt;32-bit&lt;/a&gt; or &lt;a href=&#34;http://dl.bintray.com/oneclick/rubyinstaller/rubyinstaller-2.0.0-p451-x64.exe?direct&#34;&gt;64-bit&lt;/a&gt; versions of the RubyInstaller, and run the downloaded program. When presented with the Setup dialog box, please &lt;em&gt;select&lt;/em&gt; &lt;strong&gt;all&lt;/strong&gt; of the given options (as indicated in the following screenshot).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&#34;installing-ruby-on-os-x-or-linux:800b85f81afa203f0da91299abf0d819&#34;&gt;Installing Ruby on OS X or Linux&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;The easiest way to install Ruby on OS X or Linux is by using the &lt;a href=&#34;http://rvm.io/&#34;&gt;Ruby Version Manager (RVM)&lt;/a&gt;. To do so, open a Terminal window and execute the following command.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;``` bash Installing RVM and Ruby
$ \curl -sSL &lt;a href=&#34;https://get.rvm.io&#34;&gt;https://get.rvm.io&lt;/a&gt; | bash -s stable &amp;ndash;ruby&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
### Verifying Your Ruby Installation
Once you have Ruby installed, you can verify your installation (and check the Ruby version) by opening up a Terminal window (OS X or Linux) or a Command Prompt (Windows) and executing the following command on your command line.

``` bash Checking your Ruby version
$ ruby -v
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Congratulations! You have set up your development environment and are ready to get started with Ruby.&lt;/p&gt;

&lt;h3 id=&#34;a-ruby-primer:800b85f81afa203f0da91299abf0d819&#34;&gt;A Ruby Primer&lt;/h3&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/03/a-ruby-primer-part-1-setting-up-your-development-environment/&#34;&gt;Part 1&lt;/a&gt; of this primer, you can learn how to set up your development environment.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/03/a-ruby-primer-part-2-using-the-ruby-interactive-shell-irb/&#34;&gt;Part 2&lt;/a&gt; of this primer, you can explore using the Ruby Interactive Shell (IRB).&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/03/a-ruby-primer-part-3-ruby-scripts/&#34;&gt;Part 3&lt;/a&gt; of this primer, you can learn how to run Ruby programs (scripts).&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/03/a-ruby-primer-part-4-outputting-and-inputting-data/&#34;&gt;Part 4&lt;/a&gt; of this primer, you can learn how to output and input data, as well as how to do simple conversion of strings into integers and floats.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/03/a-ruby-primer-exercise-1-a-simple-command-line-calculator/&#34;&gt;Exercise 1&lt;/a&gt; of this primer, you can learn how to create a simple command line calculator.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/04/a-ruby-primer-part-5-strings/&#34;&gt;Part 5&lt;/a&gt; of this primer, you can learn about strings.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/04/a-ruby-primer-part-6-numbers/&#34;&gt;Part 6&lt;/a&gt; of this primer, you can learn about numbers.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/04/a-ruby-primer-part-7-booleans/&#34;&gt;Part 7&lt;/a&gt; of this primer, you can learn about booleans.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/04/a-ruby-primer-part-8-ranges/&#34;&gt;Part 8&lt;/a&gt; of this primer, you can learn about booleans.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/04/a-ruby-primer-part-9-arrays/&#34;&gt;Part 9&lt;/a&gt; of this primer, you can learn about arrays.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/04/a-ruby-primer-part-10-hashes/&#34;&gt;Part 10&lt;/a&gt; of this primer, you can learn about hashes.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/04/a-ruby-primer-part-11-variables-and-constants/&#34;&gt;Part 11&lt;/a&gt; of this primer, you can learn about variables and constants.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/04/a-ruby-primer-exercise-2-a-random-number-min-max-detector/&#34;&gt;Exercise 2&lt;/a&gt; of this primer, you can learn how to create a program to detect the minimum and maximum values from a collection of randomly generated numbers.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/06/a-ruby-primer-part-12-arithmetic-operators/&#34;&gt;Part 12&lt;/a&gt; of this primer, you can learn about arithmetic operators.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/07/a-ruby-primer-part-13-relational-operators/&#34;&gt;Part 13&lt;/a&gt; of this primer, you can learn about relational operators.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/07/a-ruby-primer-part-14-logical-operators/&#34;&gt;Part 14&lt;/a&gt; of this primer, you can learn about logical operators.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>