<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Strings on Nathanial L. McConnell</title>
    <link>http://www.nmcconnell.com/tags/strings/</link>
    <description>Recent content in Strings on Nathanial L. McConnell</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2016. All rights reserved.</copyright>
    <lastBuildDate>Tue, 01 Apr 2014 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://www.nmcconnell.com/tags/strings/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>A Ruby Primer, Part 5 -- Strings</title>
      <link>http://www.nmcconnell.com/lesson/a-ruby-primer-part-5-strings/</link>
      <pubDate>Tue, 01 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>http://www.nmcconnell.com/lesson/a-ruby-primer-part-5-strings/</guid>
      <description>

&lt;p&gt;If you have not yet set up your development environment, please refer to &lt;a href=&#34;{{ root_url }}/2014/03/a-ruby-primer-part-1-setting-up-your-development-environment/&#34;&gt;Part 1&lt;/a&gt; of this primer.&lt;/p&gt;

&lt;p&gt;If you are unfamiliar with using the Ruby Interactive Shell, please refer to &lt;a href=&#34;{{ root_url }}/2014/03/a-ruby-primer-part-3-ruby-scripts/&#34;&gt;Part 3&lt;/a&gt; of this primer.&lt;/p&gt;

&lt;h3 id=&#34;terms:5116464ff9ef46e51a52a6f6a6b1fc23&#34;&gt;Terms&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Data Type:&lt;/strong&gt; &lt;em&gt;A data type is a classification identifying a type of data.&lt;/em&gt; &lt;a href=&#34;http://en.wikipedia.org/wiki/Data_type&#34;&gt;Wikipedia article&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Literal:&lt;/strong&gt; &lt;em&gt;A literal creates objects in Ruby.&lt;/em&gt; &lt;a href=&#34;http://www.ruby-doc.org/core-2.1.1/Float.html&#34;&gt;Ruby documentation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Class:&lt;/strong&gt; &lt;em&gt;A class is a template for creating objects, and for providing initial values for state (member variables, or properties) and implementations of behavior (member fuctions, or methods).&lt;/em&gt; &lt;a href=&#34;http://en.wikipedia.org/wiki/Class_(computer_programming&#34;&gt;Wikipedia article&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;String:&lt;/strong&gt; &lt;em&gt;A Ruby class representing a sequence of characters.&lt;/em&gt; &lt;a href=&#34;http://www.ruby-doc.org/core-2.1.0/String.html&#34;&gt;Ruby documentation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Escape Character:&lt;/strong&gt; &lt;em&gt;An escape character is a special character (usually preceded by a backslash that evaluates to a special character, e.g. tab, newline, etc.).&lt;/em&gt; &lt;a href=&#34;http://en.wikipedia.org/wiki/Escape_character&#34;&gt;Wikipedia article&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;strings-in-ruby:5116464ff9ef46e51a52a6f6a6b1fc23&#34;&gt;Strings in Ruby&lt;/h3&gt;

&lt;p&gt;String literals in Ruby can be created using either single or double quotes (e.g. &amp;ldquo;Clark&amp;rdquo; or &amp;lsquo;Kent&amp;rsquo;). Any characters that are encompassed withing single or double quotes is considered a string. In &lt;a href=&#34;{{ root_url }}/2014/03/a-ruby-primer-part-4-outputting-and-inputting-data/&#34;&gt;Part 4&lt;/a&gt; of this primer, we also saw that we can use the &lt;code&gt;gets&lt;/code&gt; method to get a data from the standard input as a string. (&lt;em&gt;Remember, the &lt;code&gt;gets&lt;/code&gt; method appends a newline character to each string input.&lt;/em&gt;)&lt;/p&gt;

&lt;p&gt;From IRB, let&amp;rsquo;s see string literals in action.&lt;/p&gt;

&lt;p&gt;``` irb Strings with single or double quotes
irb(main):001:0&amp;gt; name = &amp;lsquo;Clark&amp;rsquo;
=&amp;gt; &amp;ldquo;Clark&amp;rdquo;
irb(main):002:0&amp;gt; name = &amp;ldquo;Clark&amp;rdquo;
=&amp;gt; &amp;ldquo;Clark&amp;rdquo;
irb(main):003:0&amp;gt; name = gets
Clark
=&amp;gt; &amp;ldquo;Clark\n&amp;rdquo;
irb(main):004:0&amp;gt; print name
Clark
=&amp;gt; nil&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
While the `gets` method appends a newline escape character to each string input, we can also specify escape characters when we create strings in Ruby. In the following example, we are embedding a tab (\t) escape character and a space (\s) character in our strings.

``` irb Escape characters in strings
irb(main):005:0&amp;gt; name = &amp;quot;Clark\tKent&amp;quot;
=&amp;gt; &amp;quot;Clark\tKent&amp;quot;
irb(main):006:0&amp;gt; print name
Clark    Kent=&amp;gt; nil
irb(main):007:0&amp;gt; name = &amp;quot;Clark\sKent&amp;quot;
=&amp;gt; &amp;quot;Clark Kent&amp;quot;
irb(main):008:0&amp;gt; print name
=&amp;gt; Clark Kent=&amp;gt; nil
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;One of the advantages of using double quotes over single quotes is that you can embed a single quote as an apostrophe (without using an escape character). (*Note that the following example will put IRB into an error mode. Simple CTRL-C to get out of the error mode. Technically, this isn&amp;rsquo;t an &lt;strong&gt;error&lt;/strong&gt; mode, IRB is simply waiting for us to complete the unfinished, additional, single-quoted string, as indicated by the trailing single quote on our prompt.*)&lt;/p&gt;

&lt;p&gt;``` irb Embedding single quotes inside double quotes
irb(main):009:0&amp;gt; possession = &amp;ldquo;Clark&amp;rsquo;s&amp;rdquo;
=&amp;gt; &amp;ldquo;Clark&amp;rsquo;s&amp;rdquo;
irb(main):010:0&amp;gt; print possession
Clark&amp;rsquo;s=&amp;gt; nil
irb(main):011:0&amp;gt; possession = &amp;lsquo;Clark&amp;rsquo;s&amp;rsquo;
irb(main):012:0&amp;rsquo; print possession
irb(main):013:0&amp;rsquo; ^C&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
We can avoid this issue (and embed apostrophes inside single-quoted strings) by using an escape character. Or, we can simply use double quotes around around strings. (*Note that we can embed a double quote inside a double-quoted string using an escape character, also.*)

``` irb Using an escape character for an apostrophe
irb(main):014:0&amp;gt; possession = &#39;Clark\&#39;s&#39;
=&amp;gt; &amp;quot;Clark&#39;s&amp;quot;
irb(main):015:0&amp;gt; print possession
Clark&#39;s=&amp;gt; nil
irb(main):016:0&amp;gt; a_qoute = &#39;He said, &amp;quot;This is a job for Superman!&amp;quot;&#39;
=&amp;gt; &amp;quot;He said, \&amp;quot;This is a job for Superman!\&amp;quot;&amp;quot;
irb(main):017:0&amp;gt; print a_quote
He said, &amp;quot;This is a job for Superman!&amp;quot;=&amp;gt; nil
irb(main):018:0&amp;gt; a_quote = &amp;quot;Zod yelled, \&amp;quot;Kneel before Zod!\&amp;quot;&amp;quot;
=&amp;gt; &amp;quot;Zod yelled, \&amp;quot;Kneed before Zod!\&amp;quot;&amp;quot;
irb(main):019:0&amp;gt; print a_quote
Zod yelled, &amp;quot;Kneel before Zod!&amp;quot;=&amp;gt; nil
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Another difference between using single and double quotes for strings, is that you cannot use certain escape characters (e.g. newline, tab, space, etc.) inside single-quoted strings.&lt;/p&gt;

&lt;p&gt;We can also create &amp;lsquo;Here&amp;rsquo; documents (or a fancy, multiline string). To do this, we are going to create a Ruby script. We can create a multiline string inside a Ruby script using &amp;lsquo;&amp;lt;&amp;lt;&amp;rsquo; followed by an text identifier. Anything encountered by the Ruby script, up to the next instance of the text identifier, is considered a part of the string.&lt;/p&gt;

&lt;p&gt;``` ruby Example here.rb
words = &amp;lt;&amp;lt;HERE
    One small step
    for man.
    One giant leap
    for mankind.
HERE
print words&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
Run this Ruby script from your command line (in the appropriate directory).

``` bash Running here.rb
$ ruby here.rb
   One small step
   for man.
   One giant leap
   for mankind.
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;the-split-method:5116464ff9ef46e51a52a6f6a6b1fc23&#34;&gt;The split Method&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Method Signatures:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;split(pattern=$;, [limit]) -&amp;gt; anArray&lt;/em&gt; &lt;a href=&#34;http://www.ruby-doc.org/core-2.1.0/String.html#method-i-split&#34;&gt;Ruby documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;In Ruby, the &lt;code&gt;split&lt;/code&gt; method will divide a string into substrings based on a delimiter, and return an array (indicated by square brackets, []) of these substrings. (&lt;em&gt;Note that we will be discussing arrays in a later part of this primer.&lt;/em&gt;)&lt;/p&gt;

&lt;p&gt;Ruby also allows us to create and assign multiple variables at the same time by using a comma (,) to separate the variables.&lt;/p&gt;

&lt;p&gt;From IRB, let&amp;rsquo;s see the &lt;code&gt;split&lt;/code&gt; method in action.&lt;/p&gt;

&lt;p&gt;``` irb The split method
irb(main):001:0&amp;gt; first, last = &amp;ldquo;Clark,Kent&amp;rdquo;.split(&amp;lsquo;,&amp;rsquo;)
=&amp;gt; [&amp;ldquo;Clark&amp;rdquo;, &amp;ldquo;Kent&amp;rdquo;]
irb(main):002:0&amp;gt; print first
Clark=&amp;gt; nil
irb(main):003:0&amp;gt; print last
Kent=&amp;gt; nil
irb(main):004:0&amp;gt; puts first + &amp;ldquo; &amp;rdquo; + last
Clark Kent
=&amp;gt; nil&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
#### The squeeze Method
&amp;gt; **Method Signatures:**
&amp;gt;
&amp;gt; - *squeeze([other_str\*]) -&amp;gt; new_str* [Ruby documentation](http://www.ruby-doc.org/core-2.1.0/String.html#method-i-squeeze)

In Ruby, the `squeeze` method will take a string and replace any runs (multiples of the same character) of a character with a single instance of that character. (*Note that a space character is the default character for replacement.*)

From IRB, let&#39;s see the `squeeze` method in action.

``` irb The squeeze method
irb(main):005:0&amp;gt; first = &amp;quot;Clark          &amp;quot;
=&amp;gt; &amp;quot;Clark          &amp;quot;
irb(main):006:0&amp;gt; last = &amp;quot;Kent&amp;quot;
=&amp;gt; &amp;quot;Kent&amp;quot;
irb(main):007:0&amp;gt; print first + last
Clark          Kent=&amp;gt; nil
irb(main):008:0&amp;gt; print first.squeeze + last
Clark Kent=&amp;gt; nil
irb(main):009:0&amp;gt; first = &amp;quot;Clarrrrrk&amp;quot;
=&amp;gt; &amp;quot;Clarrrrrk&amp;quot;
irb(main):010:0&amp;gt; last = &amp;quot;     Kennnttttt&amp;quot;
=&amp;gt; &amp;quot;     Kennnttttt&amp;quot;
irb(main):011:0&amp;gt; print first + last
Clarrrrrk     Kennnttttt=&amp;gt; nil
irb(main):012:0&amp;gt; print first.squeeze(&amp;quot;r&amp;quot;) + last.squeeze(&amp;quot; n-t&amp;quot;)
Clark Kent=&amp;gt; nil
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ruby provides many other useful string methods. We recommend exploring the &lt;a href=&#34;http://www.ruby-doc.org/core-2.1.0/String.html&#34;&gt;Ruby documentation&lt;/a&gt; and trying out some of these on your own to gain a better understanding. We will be using various string methods throughout the rest of this primer.&lt;/p&gt;

&lt;p&gt;Congratulations! You have learned about some of the basic ways to use the string data type.&lt;/p&gt;

&lt;h3 id=&#34;a-ruby-primer:5116464ff9ef46e51a52a6f6a6b1fc23&#34;&gt;A Ruby Primer&lt;/h3&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/03/a-ruby-primer-part-1-setting-up-your-development-environment/&#34;&gt;Part 1&lt;/a&gt; of this primer, you can learn how to set up your development environment.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/03/a-ruby-primer-part-2-using-the-ruby-interactive-shell-irb/&#34;&gt;Part 2&lt;/a&gt; of this primer, you can explore using the Ruby Interactive Shell (IRB).&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/03/a-ruby-primer-part-3-ruby-scripts/&#34;&gt;Part 3&lt;/a&gt; of this primer, you can learn how to run Ruby programs (scripts).&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/03/a-ruby-primer-part-4-outputting-and-inputting-data/&#34;&gt;Part 4&lt;/a&gt; of this primer, you can learn how to output and input data, as well as how to do simple conversion of strings into integers and floats.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/03/a-ruby-primer-exercise-1-a-simple-command-line-calculator/&#34;&gt;Exercise 1&lt;/a&gt; of this primer, you can learn how to create a simple command line calculator.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/04/a-ruby-primer-part-5-strings/&#34;&gt;Part 5&lt;/a&gt; of this primer, you can learn about strings.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/04/a-ruby-primer-part-6-numbers/&#34;&gt;Part 6&lt;/a&gt; of this primer, you can learn about numbers.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/04/a-ruby-primer-part-7-booleans/&#34;&gt;Part 7&lt;/a&gt; of this primer, you can learn about booleans.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/04/a-ruby-primer-part-8-ranges/&#34;&gt;Part 8&lt;/a&gt; of this primer, you can learn about booleans.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/04/a-ruby-primer-part-9-arrays/&#34;&gt;Part 9&lt;/a&gt; of this primer, you can learn about arrays.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/04/a-ruby-primer-part-10-hashes/&#34;&gt;Part 10&lt;/a&gt; of this primer, you can learn about hashes.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/04/a-ruby-primer-part-11-variables-and-constants/&#34;&gt;Part 11&lt;/a&gt; of this primer, you can learn about variables and constants.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/04/a-ruby-primer-exercise-2-a-random-number-min-max-detector/&#34;&gt;Exercise 2&lt;/a&gt; of this primer, you can learn how to create a program to detect the minimum and maximum values from a collection of randomly generated numbers.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/06/a-ruby-primer-part-12-arithmetic-operators/&#34;&gt;Part 12&lt;/a&gt; of this primer, you can learn about arithmetic operators.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/07/a-ruby-primer-part-13-relational-operators/&#34;&gt;Part 13&lt;/a&gt; of this primer, you can learn about relational operators.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/07/a-ruby-primer-part-14-logical-operators/&#34;&gt;Part 14&lt;/a&gt; of this primer, you can learn about logical operators.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>