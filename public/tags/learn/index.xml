<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Learn on Nathanial L. McConnell</title>
    <link>http://www.nmcconnell.com/tags/learn/</link>
    <description>Recent content in Learn on Nathanial L. McConnell</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2016. All rights reserved.</copyright>
    <lastBuildDate>Thu, 03 Apr 2014 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://www.nmcconnell.com/tags/learn/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>A Ruby Primer: Exercise 1 -- A random number min-max detector</title>
      <link>http://www.nmcconnell.com/assignment/a-ruby-primer-exercise-2-a-random-number-min-max-detector/</link>
      <pubDate>Thu, 03 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>http://www.nmcconnell.com/assignment/a-ruby-primer-exercise-2-a-random-number-min-max-detector/</guid>
      <description>

&lt;p&gt;In this exercise, you will create a Ruby script to detect the minimum and maximum values from a collection of randomly generated numbers.&lt;/p&gt;

&lt;h3 id=&#34;specification:ad7459bb2fde040ae85c94aed473709a&#34;&gt;Specification&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;File Name:&lt;/strong&gt; &lt;em&gt;random-min-max.rb&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Input:&lt;/strong&gt; &lt;em&gt;Several numbers representing the minimum possible randomly generated number, the maximum possible randomly generated number, and the number of random numbers to generate.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Output:&lt;/strong&gt; &lt;em&gt;Several strings containing various prompts, the results of the minimum and maximum detected values from the randomly generated numbers, and all of the randomly generated numbers for verification purposes.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Methods Used:&lt;/strong&gt; &lt;em&gt;puts, print, gets, chomp, to_i, to_s (for integers), min, max, each&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Classes Used:&lt;/strong&gt; &lt;em&gt;Random&lt;/em&gt; &lt;a href=&#34;http://www.ruby-doc.org/core-2.1.1/Random.html&#34;&gt;Ruby documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;additional-notes:ad7459bb2fde040ae85c94aed473709a&#34;&gt;Additional Notes&lt;/h3&gt;

&lt;p&gt;One of the best ways to learn a new programming language is to explore the language reference and specification for yourself. Even experienced coders will often find hidden gems in a language&amp;rsquo;s documentation.&lt;/p&gt;

&lt;p&gt;In this exercise, you will be using the Random class from the Ruby core specification. You will also be using a loop. As we have not yet covered loops in this primer, here is some code that you will want to include in your Ruby script to accomplish the generation of random numbers.&lt;/p&gt;

&lt;p&gt;``` ruby Generating random numbers
while i &amp;lt; number_of_random_numbers.to_i
  random_numbers[i] = Random.random(minimum_possible_random_number).to_i..maximum_possible_random_number.to_i)
  i += 1
end&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
### Sample Output
``` text
Welcome to the Random Number Min-Max Detector by Disciples of Code

What is the lowest random number you would like to possibly generate? 24
What is the highest random number you would like to possibly generate? 42
How many random numbers (between 24 and 42 ) would you like to generate? 12

The maximum value of the random numbers generated is: 39
The minimum value of the random numbers generated is: 24

For verification, here are all of the randon numbers generated:
38 39 28 32 30 30 30 34 24 31 35 26

Thank you for using my program!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Give this exercise a try. A solution will be posted soon.&lt;/p&gt;

&lt;h3 id=&#34;a-ruby-primer:ad7459bb2fde040ae85c94aed473709a&#34;&gt;A Ruby Primer&lt;/h3&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/03/a-ruby-primer-part-1-setting-up-your-development-environment/&#34;&gt;Part 1&lt;/a&gt; of this primer, you can learn how to set up your development environment.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/03/a-ruby-primer-part-2-using-the-ruby-interactive-shell-irb/&#34;&gt;Part 2&lt;/a&gt; of this primer, you can explore using the Ruby Interactive Shell (IRB).&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/03/a-ruby-primer-part-3-ruby-scripts/&#34;&gt;Part 3&lt;/a&gt; of this primer, you can learn how to run Ruby programs (scripts).&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/03/a-ruby-primer-part-4-outputting-and-inputting-data/&#34;&gt;Part 4&lt;/a&gt; of this primer, you can learn how to output and input data, as well as how to do simple conversion of strings into integers and floats.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/03/a-ruby-primer-exercise-1-a-simple-command-line-calculator/&#34;&gt;Exercise 1&lt;/a&gt; of this primer, you can learn how to create a simple command line calculator.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/04/a-ruby-primer-part-5-strings/&#34;&gt;Part 5&lt;/a&gt; of this primer, you can learn about strings.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/04/a-ruby-primer-part-6-numbers/&#34;&gt;Part 6&lt;/a&gt; of this primer, you can learn about numbers.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/04/a-ruby-primer-part-7-booleans/&#34;&gt;Part 7&lt;/a&gt; of this primer, you can learn about booleans.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/04/a-ruby-primer-part-8-ranges/&#34;&gt;Part 8&lt;/a&gt; of this primer, you can learn about booleans.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/04/a-ruby-primer-part-9-arrays/&#34;&gt;Part 9&lt;/a&gt; of this primer, you can learn about arrays.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/04/a-ruby-primer-part-10-hashes/&#34;&gt;Part 10&lt;/a&gt; of this primer, you can learn about hashes.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/04/a-ruby-primer-part-11-variables-and-constants/&#34;&gt;Part 11&lt;/a&gt; of this primer, you can learn about variables and constants.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/04/a-ruby-primer-exercise-2-a-random-number-min-max-detector/&#34;&gt;Exercise 2&lt;/a&gt; of this primer, you can learn how to create a program to detect the minimum and maximum values from a collection of randomly generated numbers.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/06/a-ruby-primer-part-12-arithmetic-operators/&#34;&gt;Part 12&lt;/a&gt; of this primer, you can learn about arithmetic operators.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/07/a-ruby-primer-part-13-relational-operators/&#34;&gt;Part 13&lt;/a&gt; of this primer, you can learn about relational operators.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/07/a-ruby-primer-part-14-logical-operators/&#34;&gt;Part 14&lt;/a&gt; of this primer, you can learn about logical operators.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>A Ruby Primer: Exercise 1 -- A simple command line calculator</title>
      <link>http://www.nmcconnell.com/assignment/a-ruby-primer-exercise-1-a-simple-command-line-calculator/</link>
      <pubDate>Mon, 31 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>http://www.nmcconnell.com/assignment/a-ruby-primer-exercise-1-a-simple-command-line-calculator/</guid>
      <description>

&lt;p&gt;In this exercise, you will create a Ruby script for a simple command line calculator.&lt;/p&gt;

&lt;h3 id=&#34;specification:368c30966dfb1a110f74e1ea6c4b2f3c&#34;&gt;Specification&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;File Name:&lt;/strong&gt; &lt;em&gt;simple-calculator.rb&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Input:&lt;/strong&gt; &lt;em&gt;Several strings containing your name, the user&amp;rsquo;s name, integers, and floats.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Output:&lt;/strong&gt; &lt;em&gt;Several strings containing various prompts and the results of various arithmetic calculations.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Methods Used:&lt;/strong&gt; &lt;em&gt;puts, print, gets, to_i, to_f, to_s (for floats)&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;sample-output:368c30966dfb1a110f74e1ea6c4b2f3c&#34;&gt;Sample Output&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;Welcome to the Simple Calculator by Disciples of Code
Please enter your name: Clark Kent
Hello, Clark Kent
Let&#39;s try some addition!
Please enter a number to add: 1.55
Please enter another number to add: 4
The result of adding 1.55 plus 4 is: 5.55
Let&#39;s try some subtraction!
Please enter a number to subtract: 7.33
Please enter another number to subtract: 2.33
The result of subtracting 2.33 from 7.33 is: 5.0
Let&#39;s try some multiplication!
Please enter a number to multiply: 2
Please enter another number to multiply: 5.12
The result of multiplying 2 times 5.12 is: 10.24
Let&#39;s try some division!
Please enter a number to divide: 8.78
Please enter another number to divide: 2.2
The result of dividing 8.78 by 2.2 is: 3.9909090909090903
Thank you for using the Simple Calculator!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Give this exercise a try. A solution will be posted soon.&lt;/p&gt;

&lt;h3 id=&#34;a-ruby-primer:368c30966dfb1a110f74e1ea6c4b2f3c&#34;&gt;A Ruby Primer&lt;/h3&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/03/a-ruby-primer-part-1-setting-up-your-development-environment/&#34;&gt;Part 1&lt;/a&gt; of this primer, you can learn how to set up your development environment.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/03/a-ruby-primer-part-2-using-the-ruby-interactive-shell-irb/&#34;&gt;Part 2&lt;/a&gt; of this primer, you can explore using the Ruby Interactive Shell (IRB).&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/03/a-ruby-primer-part-3-ruby-scripts/&#34;&gt;Part 3&lt;/a&gt; of this primer, you can learn how to run Ruby programs (scripts).&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/03/a-ruby-primer-part-4-outputting-and-inputting-data/&#34;&gt;Part 4&lt;/a&gt; of this primer, you can learn how to output and input data, as well as how to do simple conversion of strings into integers and floats.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/03/a-ruby-primer-exercise-1-a-simple-command-line-calculator/&#34;&gt;Exercise 1&lt;/a&gt; of this primer, you can learn how to create a simple command line calculator.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/04/a-ruby-primer-part-5-strings/&#34;&gt;Part 5&lt;/a&gt; of this primer, you can learn about strings.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/04/a-ruby-primer-part-6-numbers/&#34;&gt;Part 6&lt;/a&gt; of this primer, you can learn about numbers.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/04/a-ruby-primer-part-7-booleans/&#34;&gt;Part 7&lt;/a&gt; of this primer, you can learn about booleans.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/04/a-ruby-primer-part-8-ranges/&#34;&gt;Part 8&lt;/a&gt; of this primer, you can learn about booleans.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/04/a-ruby-primer-part-9-arrays/&#34;&gt;Part 9&lt;/a&gt; of this primer, you can learn about arrays.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/04/a-ruby-primer-part-10-hashes/&#34;&gt;Part 10&lt;/a&gt; of this primer, you can learn about hashes.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/04/a-ruby-primer-part-11-variables-and-constants/&#34;&gt;Part 11&lt;/a&gt; of this primer, you can learn about variables and constants.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/04/a-ruby-primer-exercise-2-a-random-number-min-max-detector/&#34;&gt;Exercise 2&lt;/a&gt; of this primer, you can learn how to create a program to detect the minimum and maximum values from a collection of randomly generated numbers.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/06/a-ruby-primer-part-12-arithmetic-operators/&#34;&gt;Part 12&lt;/a&gt; of this primer, you can learn about arithmetic operators.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/07/a-ruby-primer-part-13-relational-operators/&#34;&gt;Part 13&lt;/a&gt; of this primer, you can learn about relational operators.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/07/a-ruby-primer-part-14-logical-operators/&#34;&gt;Part 14&lt;/a&gt; of this primer, you can learn about logical operators.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>A Ruby Primer, Part 2 -- Using the Ruby interactive shell IRB</title>
      <link>http://www.nmcconnell.com/lesson/a-ruby-primer-part-2-using-the-ruby-interactive-shell-irb/</link>
      <pubDate>Tue, 25 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>http://www.nmcconnell.com/lesson/a-ruby-primer-part-2-using-the-ruby-interactive-shell-irb/</guid>
      <description>

&lt;p&gt;If you have not yet set up your development environment, please refer to &lt;a href=&#34;{{ root_url }}/2014/03/a-ruby-primer-part-1-setting-up-your-development-environment/&#34;&gt;Part 1&lt;/a&gt; of this primer.&lt;/p&gt;

&lt;h3 id=&#34;using-irb:13a4833975b30c7ec5267d72bdd63db4&#34;&gt;Using IRB&lt;/h3&gt;

&lt;p&gt;The Ruby Interactive Shell, or IRB, provides a command line with which we can immediately evaluate a Ruby statement or expression. To load IRB, open a Terminal window (OS X or Linux) or a Command Prompt (Windows), and execute the following command.&lt;/p&gt;

&lt;p&gt;``` bash Loading IRB
$ irb&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
You should now be inside IRB, and should have a command prompt similar to the following.

``` irb IRB command prompt
irb(main):001:0&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In Ruby, a literal number evaluates to itself. (&lt;em&gt;Note that each line beginning with &amp;lsquo;irb(main)&amp;rsquo; is a command prompt, and each line beginning with &amp;lsquo;=&amp;gt;&amp;rsquo; is the resultant evaluation of the statement or expression to be evaluated.&lt;/em&gt;)&lt;/p&gt;

&lt;p&gt;``` irb Evaluation of a literal number
irb(main):001:0&amp;gt; 1
=&amp;gt; 1&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
An arithmetic expression evaluates to the result of the expression, taking into account order of precedence of arithmetic operators (more on this in future parts of the Ruby primer).

``` irb Evaluation of an arithmetic expression
irb(main):002:0&amp;gt; 1 + 2
=&amp;gt; 3
irb(main):003:0&amp;gt; 3 * 3
=&amp;gt; 9
irb(main):004:0&amp;gt; 1 + 2 * 3
=&amp;gt; 7
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Strings evaluate to themselves, and can be concatenated (using the &amp;lsquo;+&amp;rsquo; operator).&lt;/p&gt;

&lt;p&gt;``` irb Evaluation of a string
irb(main):005:0&amp;gt; &amp;ldquo;hello, world&amp;rdquo;
=&amp;gt; &amp;ldquo;hello, world&amp;rdquo;
irb(main):006:0&amp;gt; &amp;ldquo;hello, &amp;rdquo; + &amp;ldquo;world&amp;rdquo;
=&amp;gt; &amp;ldquo;hello, world&amp;rdquo;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
Data can be stored in variables (using the &#39;=&#39; operator, and the variable will evaluate to the contents of the variable.

``` irb Storing data in and evaluating variables
irb(main):007:0&amp;gt; greeting = &amp;quot;hello&amp;quot;
=&amp;gt; &amp;quot;hello&amp;quot;
irb(main):008:0&amp;gt; greeting
=&amp;gt; &amp;quot;hello&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Variables can be concatenated (again, using the &amp;lsquo;+&amp;rsquo; operator).&lt;/p&gt;

&lt;p&gt;``` irb Concatenating and evaluating variables
irb(main):009:0&amp;gt; greeting + &amp;ldquo;, world&amp;rdquo;
=&amp;gt; &amp;ldquo;hello, world&amp;rdquo;
irb(main):010:0&amp;gt; subject = &amp;ldquo;world&amp;rdquo;
=&amp;gt; &amp;ldquo;world&amp;rdquo;
irb(main):011:0&amp;gt; greeting + &amp;ldquo;, &amp;rdquo; + subject
=&amp;gt; &amp;ldquo;hello, world&amp;rdquo;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
Complex expressions can be evaluated. (Don&#39;t worry too much about what exactly is happening here, as it will be covered in-depth in future parts of this Ruby primer.)

``` irb Evaluating a complex expression
irb(main):012:0&amp;gt; i = 1
=&amp;gt; 1
irb(main):013:0&amp;gt; while i &amp;lt; 100
irb(main):014:1&amp;gt;   print i
irb(main):015:1&amp;gt;   i += 1
irb(main):016:1&amp;gt; end
123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899=&amp;gt; nil
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Functions can be defined and evaluated. (&lt;em&gt;Note that in Ruby, functions do not require a &amp;lsquo;return&amp;rsquo; statement, you can just have an expression. If that expression is the last statement, that is what will be returned.&lt;/em&gt;)&lt;/p&gt;

&lt;p&gt;``` irb Defining and evaluating functions
irb(main):017:0&amp;gt; def square(n)
irb(main):018:1&amp;gt;   return n * n
irb(main):019:1&amp;gt; end
=&amp;gt; nil
irb(main):020:0&amp;gt; square(2)
=&amp;gt; 4
irb(main):021:0&amp;gt; square(4)
=&amp;gt; 16
irb(main):022:0&amp;gt; def sum(num1, num2)
irb(main):023:1&amp;gt;   num1 + num2
irb(main):024:1&amp;gt; end
=&amp;gt; nil
irb(main):025:0&amp;gt; sum(1, 2)
=&amp;gt; 3&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
You can exit IRB by using the &#39;quit&#39; command, and will be returned to your regular command prompt.

``` irb Exiting IRB
irb(main):026:0&amp;gt; quit
$
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Congratulation! You have just gotten your feet wet using Ruby and the Ruby Interactive Shell (IRB).&lt;/p&gt;

&lt;h3 id=&#34;a-ruby-primer:13a4833975b30c7ec5267d72bdd63db4&#34;&gt;A Ruby Primer&lt;/h3&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/03/a-ruby-primer-part-1-setting-up-your-development-environment/&#34;&gt;Part 1&lt;/a&gt; of this primer, you can learn how to set up your development environment.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/03/a-ruby-primer-part-2-using-the-ruby-interactive-shell-irb/&#34;&gt;Part 2&lt;/a&gt; of this primer, you can explore using the Ruby Interactive Shell (IRB).&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/03/a-ruby-primer-part-3-ruby-scripts/&#34;&gt;Part 3&lt;/a&gt; of this primer, you can learn how to run Ruby programs (scripts).&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/03/a-ruby-primer-part-4-outputting-and-inputting-data/&#34;&gt;Part 4&lt;/a&gt; of this primer, you can learn how to output and input data, as well as how to do simple conversion of strings into integers and floats.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/03/a-ruby-primer-exercise-1-a-simple-command-line-calculator/&#34;&gt;Exercise 1&lt;/a&gt; of this primer, you can learn how to create a simple command line calculator.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/04/a-ruby-primer-part-5-strings/&#34;&gt;Part 5&lt;/a&gt; of this primer, you can learn about strings.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/04/a-ruby-primer-part-6-numbers/&#34;&gt;Part 6&lt;/a&gt; of this primer, you can learn about numbers.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/04/a-ruby-primer-part-7-booleans/&#34;&gt;Part 7&lt;/a&gt; of this primer, you can learn about booleans.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/04/a-ruby-primer-part-8-ranges/&#34;&gt;Part 8&lt;/a&gt; of this primer, you can learn about booleans.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/04/a-ruby-primer-part-9-arrays/&#34;&gt;Part 9&lt;/a&gt; of this primer, you can learn about arrays.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/04/a-ruby-primer-part-10-hashes/&#34;&gt;Part 10&lt;/a&gt; of this primer, you can learn about hashes.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/04/a-ruby-primer-part-11-variables-and-constants/&#34;&gt;Part 11&lt;/a&gt; of this primer, you can learn about variables and constants.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/04/a-ruby-primer-exercise-2-a-random-number-min-max-detector/&#34;&gt;Exercise 2&lt;/a&gt; of this primer, you can learn how to create a program to detect the minimum and maximum values from a collection of randomly generated numbers.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/06/a-ruby-primer-part-12-arithmetic-operators/&#34;&gt;Part 12&lt;/a&gt; of this primer, you can learn about arithmetic operators.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/07/a-ruby-primer-part-13-relational-operators/&#34;&gt;Part 13&lt;/a&gt; of this primer, you can learn about relational operators.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/07/a-ruby-primer-part-14-logical-operators/&#34;&gt;Part 14&lt;/a&gt; of this primer, you can learn about logical operators.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>A Ruby Primer, Part 1 -- Setting up your development environment</title>
      <link>http://www.nmcconnell.com/lesson/a-ruby-primer-part-1-setting-up-your-development-environment/</link>
      <pubDate>Mon, 24 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>http://www.nmcconnell.com/lesson/a-ruby-primer-part-1-setting-up-your-development-environment/</guid>
      <description>

&lt;p&gt;The first step to learning Ruby (or any programming language) is to set up your development environment, so let&amp;rsquo;s dive right in.&lt;/p&gt;

&lt;p&gt;The simplest method is to use a free, online development environment, such as those provided by &lt;a href=&#34;https://koding.com/R/nathanialmcconnell&#34;&gt;Koding.com&lt;/a&gt;. If you have already signed up for a &lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt; account (which is highly recommended for source control and for sharing your code), you can sign up for Koding.com using your GitHub account credentials. As part of our goal of collaborative learning, we will be using both Koding.com and GitHub in the future, but neither are required to be able to complete this Ruby primer.&lt;/p&gt;

&lt;h3 id=&#34;installing-ruby:800b85f81afa203f0da91299abf0d819&#34;&gt;Installing Ruby&lt;/h3&gt;

&lt;p&gt;The alternative to using an online development environment is to install Ruby on your local development machine (e.g. your desktop or laptop computer).&lt;/p&gt;

&lt;h4 id=&#34;installing-ruby-on-windows:800b85f81afa203f0da91299abf0d819&#34;&gt;Installing Ruby on Windows&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;The easiest way to install Ruby on Windows is by using the &lt;a href=&#34;http://rubyinstaller.org/&#34;&gt;RubyInstaller&lt;/a&gt;. We will be using Ruby 2.0.0-p451 (patch level 451 of Ruby version 2.0.0). Simply download the &lt;a href=&#34;http://dl.bintray.com/oneclick/rubyinstaller/rubyinstaller-2.0.0-p451.exe?direct&#34;&gt;32-bit&lt;/a&gt; or &lt;a href=&#34;http://dl.bintray.com/oneclick/rubyinstaller/rubyinstaller-2.0.0-p451-x64.exe?direct&#34;&gt;64-bit&lt;/a&gt; versions of the RubyInstaller, and run the downloaded program. When presented with the Setup dialog box, please &lt;em&gt;select&lt;/em&gt; &lt;strong&gt;all&lt;/strong&gt; of the given options (as indicated in the following screenshot).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&#34;installing-ruby-on-os-x-or-linux:800b85f81afa203f0da91299abf0d819&#34;&gt;Installing Ruby on OS X or Linux&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;The easiest way to install Ruby on OS X or Linux is by using the &lt;a href=&#34;http://rvm.io/&#34;&gt;Ruby Version Manager (RVM)&lt;/a&gt;. To do so, open a Terminal window and execute the following command.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;``` bash Installing RVM and Ruby
$ \curl -sSL &lt;a href=&#34;https://get.rvm.io&#34;&gt;https://get.rvm.io&lt;/a&gt; | bash -s stable &amp;ndash;ruby&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
### Verifying Your Ruby Installation
Once you have Ruby installed, you can verify your installation (and check the Ruby version) by opening up a Terminal window (OS X or Linux) or a Command Prompt (Windows) and executing the following command on your command line.

``` bash Checking your Ruby version
$ ruby -v
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Congratulations! You have set up your development environment and are ready to get started with Ruby.&lt;/p&gt;

&lt;h3 id=&#34;a-ruby-primer:800b85f81afa203f0da91299abf0d819&#34;&gt;A Ruby Primer&lt;/h3&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/03/a-ruby-primer-part-1-setting-up-your-development-environment/&#34;&gt;Part 1&lt;/a&gt; of this primer, you can learn how to set up your development environment.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/03/a-ruby-primer-part-2-using-the-ruby-interactive-shell-irb/&#34;&gt;Part 2&lt;/a&gt; of this primer, you can explore using the Ruby Interactive Shell (IRB).&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/03/a-ruby-primer-part-3-ruby-scripts/&#34;&gt;Part 3&lt;/a&gt; of this primer, you can learn how to run Ruby programs (scripts).&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/03/a-ruby-primer-part-4-outputting-and-inputting-data/&#34;&gt;Part 4&lt;/a&gt; of this primer, you can learn how to output and input data, as well as how to do simple conversion of strings into integers and floats.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/03/a-ruby-primer-exercise-1-a-simple-command-line-calculator/&#34;&gt;Exercise 1&lt;/a&gt; of this primer, you can learn how to create a simple command line calculator.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/04/a-ruby-primer-part-5-strings/&#34;&gt;Part 5&lt;/a&gt; of this primer, you can learn about strings.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/04/a-ruby-primer-part-6-numbers/&#34;&gt;Part 6&lt;/a&gt; of this primer, you can learn about numbers.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/04/a-ruby-primer-part-7-booleans/&#34;&gt;Part 7&lt;/a&gt; of this primer, you can learn about booleans.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/04/a-ruby-primer-part-8-ranges/&#34;&gt;Part 8&lt;/a&gt; of this primer, you can learn about booleans.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/04/a-ruby-primer-part-9-arrays/&#34;&gt;Part 9&lt;/a&gt; of this primer, you can learn about arrays.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/04/a-ruby-primer-part-10-hashes/&#34;&gt;Part 10&lt;/a&gt; of this primer, you can learn about hashes.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/04/a-ruby-primer-part-11-variables-and-constants/&#34;&gt;Part 11&lt;/a&gt; of this primer, you can learn about variables and constants.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/04/a-ruby-primer-exercise-2-a-random-number-min-max-detector/&#34;&gt;Exercise 2&lt;/a&gt; of this primer, you can learn how to create a program to detect the minimum and maximum values from a collection of randomly generated numbers.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/06/a-ruby-primer-part-12-arithmetic-operators/&#34;&gt;Part 12&lt;/a&gt; of this primer, you can learn about arithmetic operators.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/07/a-ruby-primer-part-13-relational-operators/&#34;&gt;Part 13&lt;/a&gt; of this primer, you can learn about relational operators.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/07/a-ruby-primer-part-14-logical-operators/&#34;&gt;Part 14&lt;/a&gt; of this primer, you can learn about logical operators.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Disciples of Code: Decoded, Part 1 -- Code</title>
      <link>http://www.nmcconnell.com/post/disciples-of-code-decoded-part-1-code/</link>
      <pubDate>Mon, 17 Feb 2014 00:00:00 +0000</pubDate>
      
      <guid>http://www.nmcconnell.com/post/disciples-of-code-decoded-part-1-code/</guid>
      <description>&lt;p&gt;I say &amp;lsquo;code&amp;rsquo;, you say &amp;lsquo;program&amp;rsquo;. He says &amp;lsquo;script&amp;rsquo;, she says &amp;lsquo;app&amp;rsquo;. Does it matter? Putting aside the many technical definitions and nuances, in practice these terms are nearly synonymous — at least to a general audience. What we&amp;rsquo;re really talking about is machine language, or a way of communicating with machines (e.g., computers) by combining a set of symbols, words, and statements according to certain predefined rules.&lt;/p&gt;

&lt;aside class=&#34;quote pullquote float-right&#34;&gt;
  &lt;div class=&#34;pullquote-right-textbox&#34;&gt;
    &lt;p class=&#34;pullquote-text text-right first-word&#34;&gt;Communication&lt;/p&gt;
    &lt;p class=&#34;pullquote-text text-justify remaining-words&#34;&gt;is more than just words, communication is architecture, because of course it is quite obvious that a house which would be built without that will, that desire to communicate, would not look the way your house looks today.&lt;/p&gt;
    &lt;p class=&#34;pullquote-text text-right by&#34;&gt;&amp;mdash;&lt;a href=&#34;http://www.officialpoe.com&#34;&gt;Poe (singer)&lt;/a&gt;&lt;/p&gt;
  &lt;/div&gt;
&lt;/aside&gt;

&lt;p&gt;Does this sound familiar? It should. It is identical to the way in which we learn any human language. Code is simply a machine language. While some human languages are moire difficult to learn than others, some machine languages involve trickier grammar or more complex syntax. The driving purpose for learning in both cases is {&amp;rdquo; whether the language learner can create something that makes sense to others &amp;ldquo;}.&lt;/p&gt;

&lt;p&gt;Machine languages differ from human languages in many important ways. Speaking and listening aren&amp;rsquo;t often a crucial part of machine languages, but they are vital to human languages; speaking code is not usually performative. Human languages tend to be chronological and have a structural basis at the sentence level. Machine languages don&amp;rsquo;t require strict chronologies, and often encourage using conditional structures to branch off from the linear path — perhaps, infinitely.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Disciples of Code: Decoded, Part 2 -- Decoding the why</title>
      <link>http://www.nmcconnell.com/post/disciples-of-code-decoded-part-2-decoding-the-why/</link>
      <pubDate>Mon, 17 Feb 2014 00:00:00 +0000</pubDate>
      
      <guid>http://www.nmcconnell.com/post/disciples-of-code-decoded-part-2-decoding-the-why/</guid>
      <description>

&lt;p&gt;You can launch your favorite web browser and do an Internet search, and find any number of individuals and organizations offering reason after reason that learning to code is important. You can most likely find an equal number offering an opposing opinion. Of course, like with nearly all subjects of grand relevance, what this really means is that the &amp;lsquo;Why&amp;rsquo; to the importance of coding, is up to you. And with any endeavor, the end result and polished nature of the output is nowhere near as significant as the attitude and approach of the individual undertaking the task. As such, I can only offer you a few of my own personal WHYs, and let you decide what value learning to code has to you.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;h4 id=&#34;problem-solving-people-relating:9196eddf25bb5ed0dbdcf7e9639645f1&#34;&gt;Problem-solving &amp;amp; People-relating &lt;/h4&gt;

&lt;p&gt;Writing, debugging, refactoring, and deploying code (both your own and that of others) are fundamentally problem-solving activities. Whether trying to track down a particularly annoying bug, or trying to figure out how to do something cool, working with code requires lateral thinking. Often, this involves working with other people, and allows us to learn and grow and discover new ways of approaching problems, while we learn new ways of relating to others.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;h4 id=&#34;confidence-creation:9196eddf25bb5ed0dbdcf7e9639645f1&#34;&gt;Confidence &amp;amp; Creation&lt;/h4&gt;

&lt;p&gt;Literacy in any language often leads to an increased sense of confidence, not only in terms of social interactions, but also in shaping the environments around you. It gives us a more solid and diverse foundation for decoding, or understanding, everything around us. And with understanding, comes the ability to see alternative solutions and possibilities previously hidden. We can respond intelligently to the challenges we face. We can build upon that understanding, and create or innovate. Few impulses in life stir us more deeply than that of creation. Realizing that you cannot only change and influence things, but build things which other people can use is a powerful thought.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;h4 id=&#34;taking-back-control:9196eddf25bb5ed0dbdcf7e9639645f1&#34;&gt;Taking Back Control&lt;/h4&gt;

&lt;p&gt; Many people these days feel that they have few options. Buried under crushing debt. Slaving away at a job they hate to barely make ends meet. Missing out on the things in life that truly matter — spending time with your children as they grow up, visiting that one place your heart has always longed to see — because of the incessant feeling of helplessness and powerlessness. Learning to code is a choice to empower yourself, to equip yourself with one of the most desirable skill sets in the workforce. And when you have skills that are desirable, you are presented with a wide array of options that you didn&amp;rsquo;t have before. Create mobile apps while being a stay-at-home dad? Easily accomplished. Pay off all of your student loan debt in a year or two? With enough leftover for some toys and vacations, no less! But most importantly, by making the choice to learn to code, you are making a decision to refuse to persist in a negative state. You refuse to allow anyone else to control your life. Only you can change your world.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>Disciples of Code: Decoded, Part 3 -- Discipline as disciples</title>
      <link>http://www.nmcconnell.com/post/disciples-of-code-decoded-part-3-discipline-as-disciples/</link>
      <pubDate>Mon, 17 Feb 2014 00:00:00 +0000</pubDate>
      
      <guid>http://www.nmcconnell.com/post/disciples-of-code-decoded-part-3-discipline-as-disciples/</guid>
      <description>&lt;p&gt;So you are ready to begin your journey and learn to code, but you don&amp;rsquo;t know where to begin. Of course, information is free, for those willing to find it, but not all information is as valuable or worthwhile when you are just starting out. At this point, you can&amp;rsquo;t tell bad code from good. You have no idea whether you should start out by thumbing through some massive tome of seemingly arcane jargon in an attempt to glean some tidbit of understanding, or simply fire up your trusty Internet search engine and dive in head-first.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s where I have to throw out a few caveats. If you want to reap all of the benefits outlined in &lt;a href=&#34;{{ root_url }}/2014/02/disciples-of-code-decoded-part-2-decoding-the-why/&#34;&gt;Part 2&lt;/a&gt; (and many, many more), you&amp;rsquo;re going to have to put forth a not insignificant amount of effort. You need to learn the correct way of communicating before you can make the machines sing. You need to gain a deep understanding of the methodology and purpose behind each symbol, word, or sentence to be able to fluently and effortlessly convey your own meaning. And all of this takes discipline. You must make the decision now to set aside some time every day to learn and practice, to sharpen and reinforce, to improve. But don&amp;rsquo;t worry, before you know it, you&amp;rsquo;ll be writing code in your spare time just for the joy of it. Trust me.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s said that if you want to learn the essence of something, mentor with someone who is passionate to the point of obsession about that thing. Surround yourself with others who live, breathe, eat, and sleep the thing which you yearn to understand. Ask questions fearlessly, and accept criticism courageously. Find other who are on a similar journey (and really, we are always on a similar journey). Learning from and teaching your peers will only serve to strengthen your own grasp of the subject matter. You must have discipline in learning. You must be a disciple.&lt;/p&gt;

&lt;p&gt;Some say that writing code is an art-form. In fact, I&amp;rsquo;ve often referred to myself as a &amp;lsquo;code artist&amp;rsquo;. If this is true, some inherent or implied mystery must exist, as with all art, some deeper meaning self-defined within each of us. Some interpretive quality to our individual experience with code that we carry with us, and convey unto others. While it is true that there will always be someone out there who knows more on a given subject than you, you can rest assured that only you feel and experience code as you do. So let&amp;rsquo;s take the journey together, and learn from one another, as Disciples of Code.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>