<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Nathanial L. McConnell</title>
    <link>http://www.nmcconnell.com/</link>
    <description>Recent content on Nathanial L. McConnell</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2016. All rights reserved.</copyright>
    <lastBuildDate>Wed, 16 Mar 2016 11:20:39 -0400</lastBuildDate>
    <atom:link href="http://www.nmcconnell.com/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>To laugh often and much; to win the respect of intelligent people and the affection of children; to earn the appreciation of honest critics and endure the betrayal of false friends; to appreciate beauty, to find the best in others; to leave the world a little better; whether by a healthy child, a garden patch, or a redeemed social condition; to know even one life has breathed easier because you have lived. This is the meaning of success.</title>
      <link>http://www.nmcconnell.com/quote/to-laugh-often-and-much-to-win-the-respect-of-intelligent-people/</link>
      <pubDate>Wed, 16 Mar 2016 11:20:39 -0400</pubDate>
      
      <guid>http://www.nmcconnell.com/quote/to-laugh-often-and-much-to-win-the-respect-of-intelligent-people/</guid>
      <description></description>
    </item>
    
    <item>
      <title>I&#39;ve seen things you people wouldn&#39;t believe. Attack ships on fire off the shoulder of Orion. I watched C-beams glitter in the dark near the Tannhauser gate. All those moments will be lost in time... like tears in rain... Time to die.</title>
      <link>http://www.nmcconnell.com/quote/ive-seen-things-you-people-wouldnt-believe-attack-ships-on-fire/</link>
      <pubDate>Wed, 16 Mar 2016 11:20:21 -0400</pubDate>
      
      <guid>http://www.nmcconnell.com/quote/ive-seen-things-you-people-wouldnt-believe-attack-ships-on-fire/</guid>
      <description></description>
    </item>
    
    <item>
      <title>In its time, this, his house, had been a place of great souls and great ambition, where all commonplace debate had been banned. If you wanted to talk politics or tittle-tattle you went to the coffee house; if you wanted commerce, to the Exchange. Here only miracles. Here, only the rising of spirit. And yes, love if it was pertinent (which it was so often); and sometimes bloodletting. But never the prosaic, never the trivial. Here the man who brought the strangest tale was the most welcome. Here every excess was celebrated if it brought visions, and every vision analyzed for the hints it held to the nature of the Everlasting.</title>
      <link>http://www.nmcconnell.com/quote/in-its-time-this-his-house-had-been-a-place-of-great-souls-and-great-ambition/</link>
      <pubDate>Wed, 16 Mar 2016 11:20:11 -0400</pubDate>
      
      <guid>http://www.nmcconnell.com/quote/in-its-time-this-his-house-had-been-a-place-of-great-souls-and-great-ambition/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Sometimes the right thing feels all wring until it is over and done with.</title>
      <link>http://www.nmcconnell.com/quote/sometimes-the-right-thing-feels-all-wring-until-it-is-over-and-done-with/</link>
      <pubDate>Wed, 16 Mar 2016 11:20:03 -0400</pubDate>
      
      <guid>http://www.nmcconnell.com/quote/sometimes-the-right-thing-feels-all-wring-until-it-is-over-and-done-with/</guid>
      <description></description>
    </item>
    
    <item>
      <title>And while it is true I am a supergenius with a robotic house and a rock-climbing tree, I am not perfect. No, really. I&#39;m not! I&#39;ll pause to let the disillusioned stop crying. It&#39;s sad when heroes die.</title>
      <link>http://www.nmcconnell.com/quote/and-while-it-is-true-i-am-a-supergenius-with-a-robotic-house/</link>
      <pubDate>Wed, 16 Mar 2016 11:19:12 -0400</pubDate>
      
      <guid>http://www.nmcconnell.com/quote/and-while-it-is-true-i-am-a-supergenius-with-a-robotic-house/</guid>
      <description></description>
    </item>
    
    <item>
      <title>The most authentic thing about us is our capacity to create, to overcome, to endure, to transform, to love and to be greater than our suffering.</title>
      <link>http://www.nmcconnell.com/quote/the-most-authentic-thing-about-us-is-our-capacity/</link>
      <pubDate>Tue, 15 Mar 2016 23:02:44 -0400</pubDate>
      
      <guid>http://www.nmcconnell.com/quote/the-most-authentic-thing-about-us-is-our-capacity/</guid>
      <description></description>
    </item>
    
    <item>
      <title>A Ruby Primer, Part 14 -- Logical operators</title>
      <link>http://www.nmcconnell.com/lesson/a-ruby-primer-part-14-logical-operators/</link>
      <pubDate>Mon, 07 Jul 2014 00:00:00 +0000</pubDate>
      
      <guid>http://www.nmcconnell.com/lesson/a-ruby-primer-part-14-logical-operators/</guid>
      <description>

&lt;p&gt;If you have not yet set up your development environment, please refer to &lt;a href=&#34;{{ root_url }}/2014/03/a-ruby-primer-part-1-setting-up-your-development-environment/&#34;&gt;Part 1&lt;/a&gt; of this primer.&lt;/p&gt;

&lt;p&gt;If you are unfamiliar with using the Ruby Interactive Shell, please refer to &lt;a href=&#34;{{ root_url }}/2014/03/a-ruby-primer-part-3-ruby-scripts/&#34;&gt;Part 3&lt;/a&gt; of this primer.&lt;/p&gt;

&lt;h3 id=&#34;logic-in-ruby:2336848c71f70babb58568cf7b3ec16e&#34;&gt;Logic in Ruby&lt;/h3&gt;

&lt;p&gt;Ruby provides the standard logic operators of &amp;lsquo;and&amp;rsquo;, &amp;lsquo;or&amp;rsquo;, and &amp;lsquo;not&amp;rsquo; through the logical operators &amp;lsquo;and&amp;rsquo;, &amp;lsquo;or&amp;rsquo;, and &amp;lsquo;not&amp;rsquo; (or if you prefer C-style, &amp;lsquo;&amp;amp;&amp;amp;&amp;lsquo;, &amp;lsquo;||&amp;rsquo;, and &amp;lsquo;!&amp;rsquo;), respectively.&lt;/p&gt;

&lt;p&gt;The logical operator &amp;lsquo;and&amp;rsquo; is true if, and only if, both relational (comparison) operators are true. Any other combination is false.&lt;/p&gt;

&lt;p&gt;The logical operator &amp;lsquo;or&amp;rsquo; is false if, and only if, both relational (comparison) operators are false. Any other combination is true.&lt;/p&gt;

&lt;p&gt;The logical operator &amp;lsquo;not&amp;rsquo; negates the truth value of a relational (comparison) operator (e.g. not true is false, and not false is true).&lt;/p&gt;

&lt;p&gt;From IRB, let&amp;rsquo;s see the logical operators in action. (Note: We will set up some variables for use in our example.)&lt;/p&gt;

&lt;p&gt;&lt;code&gt;irb Logical operators
irb(main):001&amp;gt; wage = 10
=&amp;gt; 10
irb(main):002&amp;gt; hours = 40
=&amp;gt; 40
irb(main):003&amp;gt; wage == 10 and hours == 40
=&amp;gt; true
irb(main):004&amp;gt; wage &amp;lt; 10 and hours == 40
=&amp;gt; false
irb(main):005&amp;gt; wage == 10 &amp;amp;&amp;amp; hours == 40
=&amp;gt; true
irb(main):006&amp;gt; wage == 10 or hours &amp;lt; 40
=&amp;gt; true
irb(main):007&amp;gt; wage &amp;lt; 10 or hours == 40
=&amp;gt; true
irb(main):008&amp;gt; wage &amp;lt; 10 || hours == 40
=&amp;gt; true
irb(main):009&amp;gt; not true
=&amp;gt; false
irb(main):010&amp;gt; not false
=&amp;gt; true
irb(main):011&amp;gt; not wage == 10
=&amp;gt; false
irb(main):012&amp;gt; !wage == 10
=&amp;gt; false
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Congratulations! You have learned about relational operators.&lt;/p&gt;

&lt;h3 id=&#34;a-ruby-primer:2336848c71f70babb58568cf7b3ec16e&#34;&gt;A Ruby Primer&lt;/h3&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/03/a-ruby-primer-part-1-setting-up-your-development-environment/&#34;&gt;Part 1&lt;/a&gt; of this primer, you can learn how to set up your development environment.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/03/a-ruby-primer-part-2-using-the-ruby-interactive-shell-irb/&#34;&gt;Part 2&lt;/a&gt; of this primer, you can explore using the Ruby Interactive Shell (IRB).&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/03/a-ruby-primer-part-3-ruby-scripts/&#34;&gt;Part 3&lt;/a&gt; of this primer, you can learn how to run Ruby programs (scripts).&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/03/a-ruby-primer-part-4-outputting-and-inputting-data/&#34;&gt;Part 4&lt;/a&gt; of this primer, you can learn how to output and input data, as well as how to do simple conversion of strings into integers and floats.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/03/a-ruby-primer-exercise-1-a-simple-command-line-calculator/&#34;&gt;Exercise 1&lt;/a&gt; of this primer, you can learn how to create a simple command line calculator.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/04/a-ruby-primer-part-5-strings/&#34;&gt;Part 5&lt;/a&gt; of this primer, you can learn about strings.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/04/a-ruby-primer-part-6-numbers/&#34;&gt;Part 6&lt;/a&gt; of this primer, you can learn about numbers.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/04/a-ruby-primer-part-7-booleans/&#34;&gt;Part 7&lt;/a&gt; of this primer, you can learn about booleans.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/04/a-ruby-primer-part-8-ranges/&#34;&gt;Part 8&lt;/a&gt; of this primer, you can learn about booleans.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/04/a-ruby-primer-part-9-arrays/&#34;&gt;Part 9&lt;/a&gt; of this primer, you can learn about arrays.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/04/a-ruby-primer-part-10-hashes/&#34;&gt;Part 10&lt;/a&gt; of this primer, you can learn about hashes.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/04/a-ruby-primer-part-11-variables-and-constants/&#34;&gt;Part 11&lt;/a&gt; of this primer, you can learn about variables and constants.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/04/a-ruby-primer-exercise-2-a-random-number-min-max-detector/&#34;&gt;Exercise 2&lt;/a&gt; of this primer, you can learn how to create a program to detect the minimum and maximum values from a collection of randomly generated numbers.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/06/a-ruby-primer-part-12-arithmetic-operators/&#34;&gt;Part 12&lt;/a&gt; of this primer, you can learn about arithmetic operators.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/07/a-ruby-primer-part-13-relational-operators/&#34;&gt;Part 13&lt;/a&gt; of this primer, you can learn about relational operators.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/07/a-ruby-primer-part-14-logical-operators/&#34;&gt;Part 14&lt;/a&gt; of this primer, you can learn about logical operators.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>A Ruby Primer, Part 13 -- Relational operators</title>
      <link>http://www.nmcconnell.com/lesson/a-ruby-primer-part-13-relational-operators/</link>
      <pubDate>Tue, 01 Jul 2014 00:00:00 +0000</pubDate>
      
      <guid>http://www.nmcconnell.com/lesson/a-ruby-primer-part-13-relational-operators/</guid>
      <description>

&lt;p&gt;If you have not yet set up your development environment, please refer to &lt;a href=&#34;{{ root_url }}/2014/03/a-ruby-primer-part-1-setting-up-your-development-environment/&#34;&gt;Part 1&lt;/a&gt; of this primer.&lt;/p&gt;

&lt;p&gt;If you are unfamiliar with using the Ruby Interactive Shell, please refer to &lt;a href=&#34;{{ root_url }}/2014/03/a-ruby-primer-part-3-ruby-scripts/&#34;&gt;Part 3&lt;/a&gt; of this primer.&lt;/p&gt;

&lt;h3 id=&#34;comparisons-in-ruby:19699eb97c2d8e0aa8c97e90270db481&#34;&gt;Comparisons in Ruby&lt;/h3&gt;

&lt;p&gt;As discussed in &lt;a href=&#34;{{ root_url }}/2014/04/a-ruby-primer-part-7-booleans/&#34;&gt;Part 7&lt;/a&gt; of this primer, Ruby provides the standard boolean values of &amp;lsquo;true&amp;rsquo; and &amp;lsquo;false, and the standard relational (comparison) operations of is equal to, is not equal to, is greater than, is less than, is greater than or equal to, is less than or equal to through the relational operators &amp;lsquo;==&amp;rsquo;, &amp;lsquo;!=&amp;rsquo;, &amp;lsquo;&amp;gt;&amp;rsquo;, &amp;lsquo;&amp;lt;&amp;lsquo;, &amp;lsquo;&amp;gt;=&amp;rsquo;, and &amp;lsquo;&amp;lt;=&amp;lsquo;, respectively. Ruby also provides a combined (or general) comparison operator, &amp;lsquo;&amp;lt;=&amp;gt;&amp;lsquo;, which returns a 0 if the first operand is equal to the second, 1 if the first operand is greater than the second, or -1 if the first operand is less than the second.&lt;/p&gt;

&lt;p&gt;From IRB, let&amp;rsquo;s see the relational (comparison) operators in action.&lt;/p&gt;

&lt;p&gt;``` irb Relational (comparison) operators
irb(main):001&amp;gt; 1 == 1
=&amp;gt; true
irb(main):002&amp;gt; 2 == 1
=&amp;gt; false
irb(main):003&amp;gt; 1 != 1
=&amp;gt; false
irb(main):004&amp;gt; 2 != 1
=&amp;gt; true
irb(main):005&amp;gt; 1 &amp;gt; 2
=&amp;gt; false
irb(main):006&amp;gt; 2 &amp;gt; 2
=&amp;gt; false
irb(main):007&amp;gt; 3 &amp;gt; 2
=&amp;gt; true
irb(main):008&amp;gt; 1 &amp;lt; 2
=&amp;gt; true
irb(main):009&amp;gt; 2 &amp;lt; 2
=&amp;gt; false
irb(main):010&amp;gt; 3 &amp;lt; 2
=&amp;gt; false
irb(main):011&amp;gt; 1 &amp;gt;= 2
=&amp;gt; false
irb(main):012&amp;gt; 2 &amp;gt;= 2
=&amp;gt; true
irb(main):013&amp;gt; 3 &amp;gt;= 2
=&amp;gt; true
irb(main):014&amp;gt; 1 &amp;lt;= 2
=&amp;gt; true
irb(main):015&amp;gt; 2 &amp;lt;= 2
=&amp;gt; true
irb(main):016&amp;gt; 3 &amp;lt;= 2
=&amp;gt; false
irb(main):017&amp;gt; 1 &amp;lt;=&amp;gt; 2
=&amp;gt; -1
irb(main):018&amp;gt; 2 &amp;lt;=&amp;gt; 2
=&amp;gt; 0
irb(main):019&amp;gt; 3 &amp;lt;=&amp;gt; 2
=&amp;gt; 1&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
Ruby allows us to use the relational (comparison) operators on strings. Keep in mind that string comparisons are case-sensitive, and that letters that come alphabetically before or after their case-sensitive counterpart (e.g. &#39;a&#39; compared to &#39;b&#39;, or &#39;B&#39; compared to &#39;A&#39;) are less than or greater than, respectively.

From IRB, let&#39;s see the relational (comparison) operators in action on strings.

``` irb Relational (comparison) operators
irb(main):020&amp;gt; &amp;quot;ant&amp;quot; == &amp;quot;ant&amp;quot;
=&amp;gt; true
irb(main):021&amp;gt; &amp;quot;Ant&amp;quot; == &amp;quot;ant&amp;quot;
=&amp;gt; false
irb(main):022&amp;gt; &amp;quot;bear&amp;quot; &amp;lt; &amp;quot;bear&amp;quot;
=&amp;gt; false
irb(main):023&amp;gt; &amp;quot;bear&amp;quot; &amp;lt; &amp;quot;beaver&amp;quot;
=&amp;gt; true
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Congratulations! You have learned about relational operators.&lt;/p&gt;

&lt;h3 id=&#34;a-ruby-primer:19699eb97c2d8e0aa8c97e90270db481&#34;&gt;A Ruby Primer&lt;/h3&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/03/a-ruby-primer-part-1-setting-up-your-development-environment/&#34;&gt;Part 1&lt;/a&gt; of this primer, you can learn how to set up your development environment.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/03/a-ruby-primer-part-2-using-the-ruby-interactive-shell-irb/&#34;&gt;Part 2&lt;/a&gt; of this primer, you can explore using the Ruby Interactive Shell (IRB).&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/03/a-ruby-primer-part-3-ruby-scripts/&#34;&gt;Part 3&lt;/a&gt; of this primer, you can learn how to run Ruby programs (scripts).&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/03/a-ruby-primer-part-4-outputting-and-inputting-data/&#34;&gt;Part 4&lt;/a&gt; of this primer, you can learn how to output and input data, as well as how to do simple conversion of strings into integers and floats.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/03/a-ruby-primer-exercise-1-a-simple-command-line-calculator/&#34;&gt;Exercise 1&lt;/a&gt; of this primer, you can learn how to create a simple command line calculator.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/04/a-ruby-primer-part-5-strings/&#34;&gt;Part 5&lt;/a&gt; of this primer, you can learn about strings.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/04/a-ruby-primer-part-6-numbers/&#34;&gt;Part 6&lt;/a&gt; of this primer, you can learn about numbers.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/04/a-ruby-primer-part-7-booleans/&#34;&gt;Part 7&lt;/a&gt; of this primer, you can learn about booleans.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/04/a-ruby-primer-part-8-ranges/&#34;&gt;Part 8&lt;/a&gt; of this primer, you can learn about booleans.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/04/a-ruby-primer-part-9-arrays/&#34;&gt;Part 9&lt;/a&gt; of this primer, you can learn about arrays.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/04/a-ruby-primer-part-10-hashes/&#34;&gt;Part 10&lt;/a&gt; of this primer, you can learn about hashes.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/04/a-ruby-primer-part-11-variables-and-constants/&#34;&gt;Part 11&lt;/a&gt; of this primer, you can learn about variables and constants.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/04/a-ruby-primer-exercise-2-a-random-number-min-max-detector/&#34;&gt;Exercise 2&lt;/a&gt; of this primer, you can learn how to create a program to detect the minimum and maximum values from a collection of randomly generated numbers.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/06/a-ruby-primer-part-12-arithmetic-operators/&#34;&gt;Part 12&lt;/a&gt; of this primer, you can learn about arithmetic operators.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/07/a-ruby-primer-part-13-relational-operators/&#34;&gt;Part 13&lt;/a&gt; of this primer, you can learn about relational operators.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/07/a-ruby-primer-part-14-logical-operators/&#34;&gt;Part 14&lt;/a&gt; of this primer, you can learn about logical operators.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>A Ruby Primer, Part 12 -- Arithmetic operators</title>
      <link>http://www.nmcconnell.com/lesson/a-ruby-primer-part-12-arithmetic-operators/</link>
      <pubDate>Sat, 28 Jun 2014 00:00:00 +0000</pubDate>
      
      <guid>http://www.nmcconnell.com/lesson/a-ruby-primer-part-12-arithmetic-operators/</guid>
      <description>

&lt;p&gt;If you have not yet set up your development environment, please refer to &lt;a href=&#34;{{ root_url }}/2014/03/a-ruby-primer-part-1-setting-up-your-development-environment/&#34;&gt;Part 1&lt;/a&gt; of this primer.&lt;/p&gt;

&lt;p&gt;If you are unfamiliar with using the Ruby Interactive Shell, please refer to &lt;a href=&#34;{{ root_url }}/2014/03/a-ruby-primer-part-3-ruby-scripts/&#34;&gt;Part 3&lt;/a&gt; of this primer.&lt;/p&gt;

&lt;h3 id=&#34;arithmetic-in-ruby:2b074086389f7e598cbba904fd5322fc&#34;&gt;Arithmetic in Ruby&lt;/h3&gt;

&lt;p&gt;As discussed in &lt;a href=&#34;{{ root_url }}/2014/04/a-ruby-primer-part-6-numbers/&#34;&gt;Part 6&lt;/a&gt; of this primer, Ruby provides the standard arithmetic operations of addition, subtraction, multiplication, division, remainder (modulo), and exponention through the binary operators &amp;lsquo;+&amp;rsquo;, &amp;lsquo;-&amp;rsquo;, &amp;lsquo;*&amp;rsquo;, &amp;lsquo;/&amp;rsquo;, &amp;lsquo;%&amp;rsquo;, &amp;lsquo;**&amp;rsquo;, respectively.&lt;/p&gt;

&lt;p&gt;Ruby orders the arithmetic operations just like you would expect. Parentheses can be used to override the standard order of operations.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Exponentiation (&amp;rsquo;**&amp;rsquo;)&lt;/li&gt;
&lt;li&gt;Unary plus (&amp;lsquo;+&amp;rsquo;) and minus (&amp;lsquo;-&amp;rsquo;)&lt;/li&gt;
&lt;li&gt;Multiplication (&amp;rsquo;*&amp;rsquo;), division (&amp;lsquo;/&amp;rsquo;), and modulo (&amp;lsquo;%&amp;rsquo;)&lt;/li&gt;
&lt;li&gt;Addition (&amp;lsquo;+&amp;rsquo;) and subtraction (&amp;lsquo;-&amp;rsquo;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;From IRB, let&amp;rsquo;s see the arithmetic operators in action.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;irb Arithmetic operators
irb(main):001:0&amp;gt; 1 + 2
=&amp;gt; 3
irb(main):002:0&amp;gt; 12.3 - 4.5
=&amp;gt; 7.8
irb(main):003:0&amp;gt; 123 * 6.28319
=&amp;gt; 772.83237
irb(main):004:0&amp;gt; 42 / 4
=&amp;gt; 10
irb(main):005:0&amp;gt; 42 % 4
=&amp;gt; 2
irb(main):006:0&amp;gt; 2 ** 10
=&amp;gt; 1024
irb(main):007:0&amp;gt; 1 + 2 * 3
=&amp;gt; 7
irb(main):008:0&amp;gt; 1 + 2 ** 3
=&amp;gt; 9
irb(main):009:0&amp;gt; (1 + 2) ** 3
=&amp;gt; 27
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Congratulations! You have learned about arithmetic operators.&lt;/p&gt;

&lt;h3 id=&#34;a-ruby-primer:2b074086389f7e598cbba904fd5322fc&#34;&gt;A Ruby Primer&lt;/h3&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/03/a-ruby-primer-part-1-setting-up-your-development-environment/&#34;&gt;Part 1&lt;/a&gt; of this primer, you can learn how to set up your development environment.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/03/a-ruby-primer-part-2-using-the-ruby-interactive-shell-irb/&#34;&gt;Part 2&lt;/a&gt; of this primer, you can explore using the Ruby Interactive Shell (IRB).&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/03/a-ruby-primer-part-3-ruby-scripts/&#34;&gt;Part 3&lt;/a&gt; of this primer, you can learn how to run Ruby programs (scripts).&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/03/a-ruby-primer-part-4-outputting-and-inputting-data/&#34;&gt;Part 4&lt;/a&gt; of this primer, you can learn how to output and input data, as well as how to do simple conversion of strings into integers and floats.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/03/a-ruby-primer-exercise-1-a-simple-command-line-calculator/&#34;&gt;Exercise 1&lt;/a&gt; of this primer, you can learn how to create a simple command line calculator.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/04/a-ruby-primer-part-5-strings/&#34;&gt;Part 5&lt;/a&gt; of this primer, you can learn about strings.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/04/a-ruby-primer-part-6-numbers/&#34;&gt;Part 6&lt;/a&gt; of this primer, you can learn about numbers.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/04/a-ruby-primer-part-7-booleans/&#34;&gt;Part 7&lt;/a&gt; of this primer, you can learn about booleans.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/04/a-ruby-primer-part-8-ranges/&#34;&gt;Part 8&lt;/a&gt; of this primer, you can learn about booleans.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/04/a-ruby-primer-part-9-arrays/&#34;&gt;Part 9&lt;/a&gt; of this primer, you can learn about arrays.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/04/a-ruby-primer-part-10-hashes/&#34;&gt;Part 10&lt;/a&gt; of this primer, you can learn about hashes.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/04/a-ruby-primer-part-11-variables-and-constants/&#34;&gt;Part 11&lt;/a&gt; of this primer, you can learn about variables and constants.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/04/a-ruby-primer-exercise-2-a-random-number-min-max-detector/&#34;&gt;Exercise 2&lt;/a&gt; of this primer, you can learn how to create a program to detect the minimum and maximum values from a collection of randomly generated numbers.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/06/a-ruby-primer-part-12-arithmetic-operators/&#34;&gt;Part 12&lt;/a&gt; of this primer, you can learn about arithmetic operators.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/07/a-ruby-primer-part-13-relational-operators/&#34;&gt;Part 13&lt;/a&gt; of this primer, you can learn about relational operators.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/07/a-ruby-primer-part-14-logical-operators/&#34;&gt;Part 14&lt;/a&gt; of this primer, you can learn about logical operators.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>A Ruby Primer, Part 10 -- Hashes</title>
      <link>http://www.nmcconnell.com/lesson/a-ruby-primer-part-10-hashes/</link>
      <pubDate>Thu, 03 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>http://www.nmcconnell.com/lesson/a-ruby-primer-part-10-hashes/</guid>
      <description>

&lt;p&gt;If you have not yet set up your development environment, please refer to &lt;a href=&#34;{{ root_url }}/2014/03/a-ruby-primer-part-1-setting-up-your-development-environment/&#34;&gt;Part 1&lt;/a&gt; of this primer.&lt;/p&gt;

&lt;p&gt;If you are unfamiliar with using the Ruby Interactive Shell, please refer to &lt;a href=&#34;{{ root_url }}/2014/03/a-ruby-primer-part-3-ruby-scripts/&#34;&gt;Part 3&lt;/a&gt; of this primer.&lt;/p&gt;

&lt;h3 id=&#34;terms:de746e5f1862cf2b72ec656cda7c5fa6&#34;&gt;Terms&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Hash:&lt;/strong&gt; &lt;em&gt;A hash is an associative collection of unique keys and their values.&lt;/em&gt; &lt;a href=&#34;http://www.ruby-doc.org/core-2.1.1/Hash.html&#34;&gt;Ruby documentation&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;hashes-in-ruby:de746e5f1862cf2b72ec656cda7c5fa6&#34;&gt;Hashes in Ruby&lt;/h3&gt;

&lt;p&gt;Ruby allows us to create dictionary-like objects, called hashes, which are associative collections of unique key-value pairs. Hashes are similar to arrays, but can use any object as an index, as opposed to the integer index that arrays use.&lt;/p&gt;

&lt;p&gt;In Ruby, we define a hash using curly braces ({}) and a colon (&amp;rsquo;:&amp;lsquo;) after the key (if the key is a &lt;a href=&#34;http://www.ruby-doc.org/core-2.1.1/Symbol.html&#34;&gt;Ruby symbol&lt;/a&gt;), or a hash rocket (&amp;lsquo;=&amp;gt;&amp;rsquo;) after the key (if the key is a string). (*Note that we will be discussing Ruby symbols later in this primer, but for now, keep in mind that after creating a symbol using a colon &lt;strong&gt;after&lt;/strong&gt; the symbol name, you can access the symbol by putting a colon &lt;strong&gt;before&lt;/strong&gt; the symbol name.*) Like other literals, we can assign hashes to variables.&lt;/p&gt;

&lt;p&gt;From IRB, let&amp;rsquo;s see hashes in action.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;irb Hash literals
irb(main):001:0&amp;gt; secret_id = {&amp;quot;Superman&amp;quot; =&amp;gt; &amp;quot;Clark Kent&amp;quot;, &amp;quot;Wonder Woman&amp;quot; =&amp;gt; &amp;quot;Diana Prince&amp;quot;, &amp;quot;Batman&amp;quot; =&amp;gt; &amp;quot;Bruce Wayne&amp;quot;, &amp;quot;Green Lantern&amp;quot; =&amp;gt; &amp;quot;Alan Scott&amp;quot;, &amp;quot;The Flash&amp;quot; =&amp;gt; &amp;quot;Jay Garrick&amp;quot;}
=&amp;gt; {&amp;quot;Superman&amp;quot;=&amp;gt;&amp;quot;Clark Kent&amp;quot;, &amp;quot;Wonder Woman&amp;quot;=&amp;gt;&amp;quot;Diana Prince&amp;quot;, &amp;quot;Batman&amp;quot;=&amp;gt;&amp;quot;Bruce Wayne&amp;quot;, &amp;quot;Green Lantern&amp;quot;=&amp;gt;&amp;quot;Alan Scott&amp;quot;, &amp;quot;The Flash&amp;quot;=&amp;gt;&amp;quot;Jay Garrick&amp;quot;}
irb(main):002:0&amp;gt; secret_id[&amp;quot;Superman&amp;quot;]
=&amp;gt; &amp;quot;Clark Kent&amp;quot;
irb(main):003:0&amp;gt; secret_id[&amp;quot;Green Lantern&amp;quot;]
=&amp;gt; &amp;quot;Alan Scott&amp;quot;
irb(main):004:0&amp;gt; first_appearance = {superman: 1938, wonder_woman: 1941, batman: 1939, green_lantern: 1940, the_flash: 1940}
irb(main):005:0&amp;gt; first_appearance[:wonder_woman]
=&amp;gt; 1941
irb(main):006:0&amp;gt; first_appearance[:the_flash]
=&amp;gt; 1940
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Ruby provides many useful hash methods. We recommend exploring the &lt;a href=&#34;http://www.ruby-doc.org/core-2.1.1/Hash.html&#34;&gt;Ruby documentation&lt;/a&gt; and trying out some of these on your own to gain a better understanding. We will be using various hash methods throughout the rest of this primer.&lt;/p&gt;

&lt;p&gt;Congratulations! You have learned about some of the basic ways to use the hash data type.&lt;/p&gt;

&lt;h3 id=&#34;a-ruby-primer:de746e5f1862cf2b72ec656cda7c5fa6&#34;&gt;A Ruby Primer&lt;/h3&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/03/a-ruby-primer-part-1-setting-up-your-development-environment/&#34;&gt;Part 1&lt;/a&gt; of this primer, you can learn how to set up your development environment.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/03/a-ruby-primer-part-2-using-the-ruby-interactive-shell-irb/&#34;&gt;Part 2&lt;/a&gt; of this primer, you can explore using the Ruby Interactive Shell (IRB).&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/03/a-ruby-primer-part-3-ruby-scripts/&#34;&gt;Part 3&lt;/a&gt; of this primer, you can learn how to run Ruby programs (scripts).&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/03/a-ruby-primer-part-4-outputting-and-inputting-data/&#34;&gt;Part 4&lt;/a&gt; of this primer, you can learn how to output and input data, as well as how to do simple conversion of strings into integers and floats.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/03/a-ruby-primer-exercise-1-a-simple-command-line-calculator/&#34;&gt;Exercise 1&lt;/a&gt; of this primer, you can learn how to create a simple command line calculator.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/04/a-ruby-primer-part-5-strings/&#34;&gt;Part 5&lt;/a&gt; of this primer, you can learn about strings.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/04/a-ruby-primer-part-6-numbers/&#34;&gt;Part 6&lt;/a&gt; of this primer, you can learn about numbers.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/04/a-ruby-primer-part-7-booleans/&#34;&gt;Part 7&lt;/a&gt; of this primer, you can learn about booleans.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/04/a-ruby-primer-part-8-ranges/&#34;&gt;Part 8&lt;/a&gt; of this primer, you can learn about booleans.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/04/a-ruby-primer-part-9-arrays/&#34;&gt;Part 9&lt;/a&gt; of this primer, you can learn about arrays.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/04/a-ruby-primer-part-10-hashes/&#34;&gt;Part 10&lt;/a&gt; of this primer, you can learn about hashes.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/04/a-ruby-primer-part-11-variables-and-constants/&#34;&gt;Part 11&lt;/a&gt; of this primer, you can learn about variables and constants.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/04/a-ruby-primer-exercise-2-a-random-number-min-max-detector/&#34;&gt;Exercise 2&lt;/a&gt; of this primer, you can learn how to create a program to detect the minimum and maximum values from a collection of randomly generated numbers.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/06/a-ruby-primer-part-12-arithmetic-operators/&#34;&gt;Part 12&lt;/a&gt; of this primer, you can learn about arithmetic operators.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/07/a-ruby-primer-part-13-relational-operators/&#34;&gt;Part 13&lt;/a&gt; of this primer, you can learn about relational operators.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/07/a-ruby-primer-part-14-logical-operators/&#34;&gt;Part 14&lt;/a&gt; of this primer, you can learn about logical operators.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>A Ruby Primer, Part 11 -- Variables and constants</title>
      <link>http://www.nmcconnell.com/lesson/a-ruby-primer-part-11-variables-and-constants/</link>
      <pubDate>Thu, 03 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>http://www.nmcconnell.com/lesson/a-ruby-primer-part-11-variables-and-constants/</guid>
      <description>

&lt;p&gt;If you have not yet set up your development environment, please refer to &lt;a href=&#34;{{ root_url }}/2014/03/a-ruby-primer-part-1-setting-up-your-development-environment/&#34;&gt;Part 1&lt;/a&gt; of this primer.&lt;/p&gt;

&lt;p&gt;If you are unfamiliar with using the Ruby Interactive Shell, please refer to &lt;a href=&#34;{{ root_url }}/2014/03/a-ruby-primer-part-3-ruby-scripts/&#34;&gt;Part 3&lt;/a&gt; of this primer.&lt;/p&gt;

&lt;h3 id=&#34;terms:9a039d157e06c473def69a4197e0f32b&#34;&gt;Terms&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Variable:&lt;/strong&gt; &lt;em&gt;A variable is a symbolic name associated with some value, whether known or unknown.&lt;/em&gt; &lt;a href=&#34;http://en.wikipedia.org/wiki/Variable_(computer_science&#34;&gt;Wikipedia article&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Constant:&lt;/strong&gt; &lt;em&gt;A constant is a symbolic name associated with some known value, that is not intended to change.&lt;/em&gt; &lt;a href=&#34;http://en.wikipedia.org/wiki/Constant_(programming&#34;&gt;Wikipedia article&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;variables-in-ruby:9a039d157e06c473def69a4197e0f32b&#34;&gt;Variables in Ruby&lt;/h3&gt;

&lt;p&gt;Ruby allows us to create variables to store any object available in Ruby. We can name our variable &lt;strong&gt;almost&lt;/strong&gt; anything we want, but there are a few rules that we must follow:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;All variables must begin with either a lowercase letter or an underscore (&amp;rsquo;_&amp;lsquo;).&lt;/li&gt;
&lt;li&gt;After the first letter (or underscore) of a variable, the variable name can only contain letters, numbers, or underscores.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When naming variables, the &lt;strong&gt;proper&lt;/strong&gt; standard practice is to use meaningful variable names (e.g. rate instead of r, or publication_date instead of date) that reduce abiguity and confusion for anyone reading your code (yourself included). For complex variable names (e.g. positive_numbers_under_ten), the Ruby convention is to use underscore to separate the words in the complex variable name. (&lt;em&gt;Note that in other languages, &lt;a href=&#34;http://en.wikipedia.org/wiki/CamelCase&#34;&gt;CamelCase&lt;/a&gt; is often used. This is purely a convention and stylistic choice of many Ruby programmers. You are free to use either in your own Ruby code.&lt;/em&gt;)&lt;/p&gt;

&lt;p&gt;In Ruby, we create a variable through an assignment operation, using the binary operator &amp;lsquo;=&amp;rsquo;. Ruby is smart enough to figure out what data type the variable should be, so that we do not have to specify a data type when creating a variable.&lt;/p&gt;

&lt;p&gt;From IRB, let&amp;rsquo;s see variable creation and assignment in action.&lt;/p&gt;

&lt;p&gt;``` irb Variable creation and assignment
irb(main):001:0&amp;gt; letter = &amp;ldquo;a&amp;rdquo;
=&amp;gt; &amp;ldquo;a&amp;rdquo;
irb(main):002:0&amp;gt; letter
=&amp;gt; &amp;ldquo;a&amp;rdquo;
irb(main):003:0&amp;gt; _number = 42
=&amp;gt; 42
irb(main):004:0&amp;gt; _number
=&amp;gt; 42
irb(main):005:0&amp;gt; first_name = &amp;ldquo;Clark&amp;rdquo;
=&amp;gt; &amp;ldquo;Clark&amp;rdquo;
irb(main):006:0&amp;gt; lastName = &amp;ldquo;Kent&amp;rdquo;
=&amp;gt; &amp;ldquo;Kent&amp;rdquo;
irb(main):007:0&amp;gt; date_of_first_appearance_of_superman = 1938
=&amp;gt; 1938&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
### Constants in Ruby

Ruby allows us to create constants, by using **all** uppercase letters in the name of our constant (e.g. TAU = 6.28319). (*Note that in Ruby, a constant isn&#39;t really constant, and can be changed at a later point in your program. However, the convention in Ruby is that constants should **not** be changed. Ruby will give you a warning when you try to reassign a constant, but will go ahead and do the reassignment anyway.*)

From IRB, let&#39;s see constant creation and assignment in action.

``` irb Constant creation and assignment
irb(main):008:0&amp;gt; TAU = 6.28319
=&amp;gt; 6.28319
irb(main):009:0&amp;gt; TAU
=&amp;gt; 6.28319
irb(main):010:0&amp;gt; SITE_NAME = &amp;quot;Disciples of Code&amp;quot;
=&amp;gt; &amp;quot;Disciples of Code&amp;quot;
irb(main):011:0&amp;gt; SITE_NAME
=&amp;gt; &amp;quot;Disciples of Code&amp;quot;
irb(main):012:0&amp;gt; SITE_NAME = &amp;quot;Your Really Awesome Site&amp;quot;
(irb):12: warning: already initializaed constant SITE_NAME
(irb):11: warning: previous definition of SITE_NAME was here
=&amp;gt; &amp;quot;Your Really Awesome Site&amp;quot;
irb(main):013:0&amp;gt; SITE_NAME
=&amp;gt; &amp;quot;Your Really Awesome Site&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We will be using variables and constant throughout the rest of this primer.&lt;/p&gt;

&lt;p&gt;Congratulations! You have learned about some of the basic ways to create and assign values to variables and constants.&lt;/p&gt;

&lt;h3 id=&#34;a-ruby-primer:9a039d157e06c473def69a4197e0f32b&#34;&gt;A Ruby Primer&lt;/h3&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/03/a-ruby-primer-part-1-setting-up-your-development-environment/&#34;&gt;Part 1&lt;/a&gt; of this primer, you can learn how to set up your development environment.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/03/a-ruby-primer-part-2-using-the-ruby-interactive-shell-irb/&#34;&gt;Part 2&lt;/a&gt; of this primer, you can explore using the Ruby Interactive Shell (IRB).&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/03/a-ruby-primer-part-3-ruby-scripts/&#34;&gt;Part 3&lt;/a&gt; of this primer, you can learn how to run Ruby programs (scripts).&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/03/a-ruby-primer-part-4-outputting-and-inputting-data/&#34;&gt;Part 4&lt;/a&gt; of this primer, you can learn how to output and input data, as well as how to do simple conversion of strings into integers and floats.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/03/a-ruby-primer-exercise-1-a-simple-command-line-calculator/&#34;&gt;Exercise 1&lt;/a&gt; of this primer, you can learn how to create a simple command line calculator.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/04/a-ruby-primer-part-5-strings/&#34;&gt;Part 5&lt;/a&gt; of this primer, you can learn about strings.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/04/a-ruby-primer-part-6-numbers/&#34;&gt;Part 6&lt;/a&gt; of this primer, you can learn about numbers.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/04/a-ruby-primer-part-7-booleans/&#34;&gt;Part 7&lt;/a&gt; of this primer, you can learn about booleans.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/04/a-ruby-primer-part-8-ranges/&#34;&gt;Part 8&lt;/a&gt; of this primer, you can learn about booleans.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/04/a-ruby-primer-part-9-arrays/&#34;&gt;Part 9&lt;/a&gt; of this primer, you can learn about arrays.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/04/a-ruby-primer-part-10-hashes/&#34;&gt;Part 10&lt;/a&gt; of this primer, you can learn about hashes.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/04/a-ruby-primer-part-11-variables-and-constants/&#34;&gt;Part 11&lt;/a&gt; of this primer, you can learn about variables and constants.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/04/a-ruby-primer-exercise-2-a-random-number-min-max-detector/&#34;&gt;Exercise 2&lt;/a&gt; of this primer, you can learn how to create a program to detect the minimum and maximum values from a collection of randomly generated numbers.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/06/a-ruby-primer-part-12-arithmetic-operators/&#34;&gt;Part 12&lt;/a&gt; of this primer, you can learn about arithmetic operators.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/07/a-ruby-primer-part-13-relational-operators/&#34;&gt;Part 13&lt;/a&gt; of this primer, you can learn about relational operators.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/07/a-ruby-primer-part-14-logical-operators/&#34;&gt;Part 14&lt;/a&gt; of this primer, you can learn about logical operators.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>A Ruby Primer, Part 9 -- Arrays</title>
      <link>http://www.nmcconnell.com/lesson/a-ruby-primer-part-9-arrays/</link>
      <pubDate>Thu, 03 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>http://www.nmcconnell.com/lesson/a-ruby-primer-part-9-arrays/</guid>
      <description>

&lt;p&gt;If you have not yet set up your development environment, please refer to &lt;a href=&#34;{{ root_url }}/2014/03/a-ruby-primer-part-1-setting-up-your-development-environment/&#34;&gt;Part 1&lt;/a&gt; of this primer.&lt;/p&gt;

&lt;p&gt;If you are unfamiliar with using the Ruby Interactive Shell, please refer to &lt;a href=&#34;{{ root_url }}/2014/03/a-ruby-primer-part-3-ruby-scripts/&#34;&gt;Part 3&lt;/a&gt; of this primer.&lt;/p&gt;

&lt;h3 id=&#34;terms:6f46e6aca10fb9fab875fb0477dffa7d&#34;&gt;Terms&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Array:&lt;/strong&gt; &lt;em&gt;An array is an ordered, indexed collection of objects.&lt;/em&gt; &lt;a href=&#34;http://www.ruby-doc.org/core-2.1.1/Array.html&#34;&gt;Ruby documentation&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;arrays-in-ruby:6f46e6aca10fb9fab875fb0477dffa7d&#34;&gt;Arrays in Ruby&lt;/h3&gt;

&lt;p&gt;Ruby allows us to create ordered (but not necessarily sequenced) collections of objects, called arrays. An array contains some number of elements (objects) which are indexed using integers. The first element of an array is at index 0. (e.g. An array containing 5 elements would have indices 0, 1, 2, 3, and 4, representing the first, second, third, fourth, and fifth elements of the array, respectively.)&lt;/p&gt;

&lt;p&gt;In Ruby, we define an array using square brackets ([]). Like other literals, we can assign arrays to variables.&lt;/p&gt;

&lt;p&gt;From IRB, let&amp;rsquo;s see arrays in action.&lt;/p&gt;

&lt;p&gt;``` irb Array literals
irb(main):001:0&amp;gt; [24, 30, 28, 42, 38]
=&amp;gt; [24, 30, 28, 42, 38]
irb(main):002:0&amp;gt; [&amp;ldquo;Disciples&amp;rdquo;, &amp;ldquo;Code&amp;rdquo;, &amp;ldquo;of&amp;rdquo;]
=&amp;gt; [&amp;ldquo;Disciples&amp;rdquo;, &amp;ldquo;Code&amp;rdquo;, &amp;ldquo;of&amp;rdquo;]
irb(main):003:0&amp;gt; postive_even_numbers_under_ten = [2, 4, 6, 8]
=&amp;gt; [2, 4, 6, 8]
irb(main):004:0&amp;gt; heroes = [&amp;ldquo;Superman&amp;rdquo;, &amp;ldquo;Wonder Woman&amp;rdquo;, &amp;ldquo;Batman&amp;rdquo;, &amp;ldquo;Green Lantern&amp;rdquo;, &amp;ldquo;The Flash&amp;rdquo;]
=&amp;gt; [&amp;ldquo;Superman&amp;rdquo;, &amp;ldquo;Wonder Woman&amp;rdquo;, &amp;ldquo;Batman&amp;rdquo;, &amp;ldquo;Green Lantern&amp;rdquo;, &amp;ldquo;The Flash&amp;rdquo;]&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
We can access an element of an array by using the square brackets to reference that element&#39;s index.

``` irb Referencing elements of an array
irb(main):005:0&amp;gt; positive_even_numbers_under_ten[0]
=&amp;gt; 2
irb(main):006:0&amp;gt; positive_even_numbers_under_ten[3]
=&amp;gt; 8
irb(main):007:0&amp;gt; heroes[1]
=&amp;gt; &amp;quot;Wonder Woman&amp;quot;
irb(main):008:0&amp;gt; heroes[3]
=&amp;gt; &amp;quot;Green Lantern&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can use elements of an array in statements and expressions.&lt;/p&gt;

&lt;p&gt;``` irb Array elements in statements and expressions
irb(main):009:0&amp;gt; sum = positive_even_numbers_under_ten[0] + positive_even_numbers_under_ten[1] + positive_even_numbers_under_ten[2] + positive_even_numbers_under_ten[3]
=&amp;gt; 20
irb(main):010:0&amp;gt; puts &amp;ldquo;My favorite heroes are &amp;rdquo; + heroes[0] + &amp;ldquo; and &amp;rdquo; + heroes[3]
=&amp;gt; nil
My favorite heroes are Superman and Green Lantern&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
Ruby gives us much more efficient methods to work with arrays, which we will be discussing later in this primer.

#### The to_a Method
&amp;gt; **Method Signatures:**
&amp;gt;
&amp;gt; - *to_a -&amp;gt; ary* [Ruby documentation](http://www.ruby-doc.org/core-2.1.1/Array.html#method-i-to_a)

In Ruby, the `to_a` method allows us to convert a range into an array.

From IRB, let&#39;s see the `to_a` method in action.

``` irb The to_a method
irb(main):011:0&amp;gt; (24..42).to_a
=&amp;gt; [24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42]
irb(main):012:0&amp;gt; whole_numbers_under_ten = 0...10
=&amp;gt; 0...10
irb(main):013:0&amp;gt; whole_numbers_under_ten.to_a
=&amp;gt; [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
irb(main):014:0&amp;gt; whole_numbers_under_ten.to_a[4]
=&amp;gt; 4
irb(main):015:0&amp;gt; letters = &#39;a&#39;..&#39;z&#39;
=&amp;gt; &amp;quot;a&amp;quot;..&amp;quot;z&amp;quot;
irb(main):016:0&amp;gt; letters.to_a
=&amp;gt; [&amp;quot;a&amp;quot;, &amp;quot;b&amp;quot;, &amp;quot;c&amp;quot;, &amp;quot;d&amp;quot;, &amp;quot;e&amp;quot;, &amp;quot;f&amp;quot;, &amp;quot;g&amp;quot;, &amp;quot;h&amp;quot;, &amp;quot;i&amp;quot;, &amp;quot;j&amp;quot;, &amp;quot;k&amp;quot;, &amp;quot;l&amp;quot;, &amp;quot;m&amp;quot;, &amp;quot;n&amp;quot;, &amp;quot;o&amp;quot;, &amp;quot;p&amp;quot;, &amp;quot;q&amp;quot;, &amp;quot;r&amp;quot;, &amp;quot;s&amp;quot;, &amp;quot;t&amp;quot;, &amp;quot;u&amp;quot;, &amp;quot;v&amp;quot;, &amp;quot;w&amp;quot;, &amp;quot;y&amp;quot;, &amp;quot;x&amp;quot;, &amp;quot;z&amp;quot;]
irb(main):017:0&amp;gt; letters.to_a[4]
=&amp;gt; &amp;quot;e&amp;quot;
irb(main):018:0&amp;gt; letters.to_a[25]
=&amp;gt; &amp;quot;z&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ruby provides many useful array methods. We recommend exploring the &lt;a href=&#34;http://www.ruby-doc.org/core-2.1.1/Array.html&#34;&gt;Ruby documentation&lt;/a&gt; and trying out some of these on your own to gain a better understanding. We will be using various array methods throughout the rest of this primer.&lt;/p&gt;

&lt;p&gt;Congratulations! You have learned about some of the basic ways to use the array data type.&lt;/p&gt;

&lt;h3 id=&#34;a-ruby-primer:6f46e6aca10fb9fab875fb0477dffa7d&#34;&gt;A Ruby Primer&lt;/h3&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/03/a-ruby-primer-part-1-setting-up-your-development-environment/&#34;&gt;Part 1&lt;/a&gt; of this primer, you can learn how to set up your development environment.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/03/a-ruby-primer-part-2-using-the-ruby-interactive-shell-irb/&#34;&gt;Part 2&lt;/a&gt; of this primer, you can explore using the Ruby Interactive Shell (IRB).&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/03/a-ruby-primer-part-3-ruby-scripts/&#34;&gt;Part 3&lt;/a&gt; of this primer, you can learn how to run Ruby programs (scripts).&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/03/a-ruby-primer-part-4-outputting-and-inputting-data/&#34;&gt;Part 4&lt;/a&gt; of this primer, you can learn how to output and input data, as well as how to do simple conversion of strings into integers and floats.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/03/a-ruby-primer-exercise-1-a-simple-command-line-calculator/&#34;&gt;Exercise 1&lt;/a&gt; of this primer, you can learn how to create a simple command line calculator.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/04/a-ruby-primer-part-5-strings/&#34;&gt;Part 5&lt;/a&gt; of this primer, you can learn about strings.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/04/a-ruby-primer-part-6-numbers/&#34;&gt;Part 6&lt;/a&gt; of this primer, you can learn about numbers.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/04/a-ruby-primer-part-7-booleans/&#34;&gt;Part 7&lt;/a&gt; of this primer, you can learn about booleans.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/04/a-ruby-primer-part-8-ranges/&#34;&gt;Part 8&lt;/a&gt; of this primer, you can learn about booleans.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/04/a-ruby-primer-part-9-arrays/&#34;&gt;Part 9&lt;/a&gt; of this primer, you can learn about arrays.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/04/a-ruby-primer-part-10-hashes/&#34;&gt;Part 10&lt;/a&gt; of this primer, you can learn about hashes.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/04/a-ruby-primer-part-11-variables-and-constants/&#34;&gt;Part 11&lt;/a&gt; of this primer, you can learn about variables and constants.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/04/a-ruby-primer-exercise-2-a-random-number-min-max-detector/&#34;&gt;Exercise 2&lt;/a&gt; of this primer, you can learn how to create a program to detect the minimum and maximum values from a collection of randomly generated numbers.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/06/a-ruby-primer-part-12-arithmetic-operators/&#34;&gt;Part 12&lt;/a&gt; of this primer, you can learn about arithmetic operators.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/07/a-ruby-primer-part-13-relational-operators/&#34;&gt;Part 13&lt;/a&gt; of this primer, you can learn about relational operators.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/07/a-ruby-primer-part-14-logical-operators/&#34;&gt;Part 14&lt;/a&gt; of this primer, you can learn about logical operators.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>A Ruby Primer: Exercise 1 -- A random number min-max detector</title>
      <link>http://www.nmcconnell.com/assignment/a-ruby-primer-exercise-2-a-random-number-min-max-detector/</link>
      <pubDate>Thu, 03 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>http://www.nmcconnell.com/assignment/a-ruby-primer-exercise-2-a-random-number-min-max-detector/</guid>
      <description>

&lt;p&gt;In this exercise, you will create a Ruby script to detect the minimum and maximum values from a collection of randomly generated numbers.&lt;/p&gt;

&lt;h3 id=&#34;specification:ad7459bb2fde040ae85c94aed473709a&#34;&gt;Specification&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;File Name:&lt;/strong&gt; &lt;em&gt;random-min-max.rb&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Input:&lt;/strong&gt; &lt;em&gt;Several numbers representing the minimum possible randomly generated number, the maximum possible randomly generated number, and the number of random numbers to generate.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Output:&lt;/strong&gt; &lt;em&gt;Several strings containing various prompts, the results of the minimum and maximum detected values from the randomly generated numbers, and all of the randomly generated numbers for verification purposes.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Methods Used:&lt;/strong&gt; &lt;em&gt;puts, print, gets, chomp, to_i, to_s (for integers), min, max, each&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Classes Used:&lt;/strong&gt; &lt;em&gt;Random&lt;/em&gt; &lt;a href=&#34;http://www.ruby-doc.org/core-2.1.1/Random.html&#34;&gt;Ruby documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;additional-notes:ad7459bb2fde040ae85c94aed473709a&#34;&gt;Additional Notes&lt;/h3&gt;

&lt;p&gt;One of the best ways to learn a new programming language is to explore the language reference and specification for yourself. Even experienced coders will often find hidden gems in a language&amp;rsquo;s documentation.&lt;/p&gt;

&lt;p&gt;In this exercise, you will be using the Random class from the Ruby core specification. You will also be using a loop. As we have not yet covered loops in this primer, here is some code that you will want to include in your Ruby script to accomplish the generation of random numbers.&lt;/p&gt;

&lt;p&gt;``` ruby Generating random numbers
while i &amp;lt; number_of_random_numbers.to_i
  random_numbers[i] = Random.random(minimum_possible_random_number).to_i..maximum_possible_random_number.to_i)
  i += 1
end&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
### Sample Output
``` text
Welcome to the Random Number Min-Max Detector by Disciples of Code

What is the lowest random number you would like to possibly generate? 24
What is the highest random number you would like to possibly generate? 42
How many random numbers (between 24 and 42 ) would you like to generate? 12

The maximum value of the random numbers generated is: 39
The minimum value of the random numbers generated is: 24

For verification, here are all of the randon numbers generated:
38 39 28 32 30 30 30 34 24 31 35 26

Thank you for using my program!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Give this exercise a try. A solution will be posted soon.&lt;/p&gt;

&lt;h3 id=&#34;a-ruby-primer:ad7459bb2fde040ae85c94aed473709a&#34;&gt;A Ruby Primer&lt;/h3&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/03/a-ruby-primer-part-1-setting-up-your-development-environment/&#34;&gt;Part 1&lt;/a&gt; of this primer, you can learn how to set up your development environment.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/03/a-ruby-primer-part-2-using-the-ruby-interactive-shell-irb/&#34;&gt;Part 2&lt;/a&gt; of this primer, you can explore using the Ruby Interactive Shell (IRB).&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/03/a-ruby-primer-part-3-ruby-scripts/&#34;&gt;Part 3&lt;/a&gt; of this primer, you can learn how to run Ruby programs (scripts).&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/03/a-ruby-primer-part-4-outputting-and-inputting-data/&#34;&gt;Part 4&lt;/a&gt; of this primer, you can learn how to output and input data, as well as how to do simple conversion of strings into integers and floats.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/03/a-ruby-primer-exercise-1-a-simple-command-line-calculator/&#34;&gt;Exercise 1&lt;/a&gt; of this primer, you can learn how to create a simple command line calculator.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/04/a-ruby-primer-part-5-strings/&#34;&gt;Part 5&lt;/a&gt; of this primer, you can learn about strings.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/04/a-ruby-primer-part-6-numbers/&#34;&gt;Part 6&lt;/a&gt; of this primer, you can learn about numbers.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/04/a-ruby-primer-part-7-booleans/&#34;&gt;Part 7&lt;/a&gt; of this primer, you can learn about booleans.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/04/a-ruby-primer-part-8-ranges/&#34;&gt;Part 8&lt;/a&gt; of this primer, you can learn about booleans.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/04/a-ruby-primer-part-9-arrays/&#34;&gt;Part 9&lt;/a&gt; of this primer, you can learn about arrays.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/04/a-ruby-primer-part-10-hashes/&#34;&gt;Part 10&lt;/a&gt; of this primer, you can learn about hashes.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/04/a-ruby-primer-part-11-variables-and-constants/&#34;&gt;Part 11&lt;/a&gt; of this primer, you can learn about variables and constants.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/04/a-ruby-primer-exercise-2-a-random-number-min-max-detector/&#34;&gt;Exercise 2&lt;/a&gt; of this primer, you can learn how to create a program to detect the minimum and maximum values from a collection of randomly generated numbers.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/06/a-ruby-primer-part-12-arithmetic-operators/&#34;&gt;Part 12&lt;/a&gt; of this primer, you can learn about arithmetic operators.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/07/a-ruby-primer-part-13-relational-operators/&#34;&gt;Part 13&lt;/a&gt; of this primer, you can learn about relational operators.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/07/a-ruby-primer-part-14-logical-operators/&#34;&gt;Part 14&lt;/a&gt; of this primer, you can learn about logical operators.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>A Ruby Primer, Part 6 -- Numbers</title>
      <link>http://www.nmcconnell.com/lesson/a-ruby-primer-part-6-numbers/</link>
      <pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>http://www.nmcconnell.com/lesson/a-ruby-primer-part-6-numbers/</guid>
      <description>

&lt;p&gt;If you have not yet set up your development environment, please refer to &lt;a href=&#34;{{ root_url }}/2014/03/a-ruby-primer-part-1-setting-up-your-development-environment/&#34;&gt;Part 1&lt;/a&gt; of this primer.&lt;/p&gt;

&lt;p&gt;If you are unfamiliar with using the Ruby Interactive Shell, please refer to &lt;a href=&#34;{{ root_url }}/2014/03/a-ruby-primer-part-3-ruby-scripts/&#34;&gt;Part 3&lt;/a&gt; of this primer.&lt;/p&gt;

&lt;h3 id=&#34;terms:e187389743e8f048f4fab6fb26282989&#34;&gt;Terms&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Numeric:&lt;/strong&gt; &lt;em&gt;A Ruby class representing a numeric data type.&lt;/em&gt; &lt;a href=&#34;http://www.ruby-doc.org/core-2.1.1/Numeric.html&#34;&gt;Ruby documentation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Integer:&lt;/strong&gt; &lt;em&gt;A Ruby class representing whole number data types.&lt;/em&gt; &lt;a href=&#34;http://www.ruby-doc.org/core-2.1.1/Integer.html&#34;&gt;Ruby documentation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Float:&lt;/strong&gt; &lt;em&gt;A Ruby class representing floating point number data types.&lt;/em&gt; &lt;a href=&#34;http://www.ruby-doc.org/core-2.1.1/Float.html&#34;&gt;Ruby documentation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Binary:&lt;/strong&gt; &lt;em&gt;A base-2 number system.&lt;/em&gt; &lt;a href=&#34;http://en.wikipedia.org/wiki/Binary_number&#34;&gt;Wikipedia article&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Dedimal:&lt;/strong&gt; &lt;em&gt;A base-10 number system.&lt;/em&gt; &lt;a href=&#34;http://en.wikipedia.org/wiki/Decimal&#34;&gt;Wikipedia article&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Hexadecimal:&lt;/strong&gt; &lt;em&gt;A base-16 number system.&lt;/em&gt; &lt;a href=&#34;http://en.wikipedia.org/wiki/Hexadecimal&#34;&gt;Wikipedia article&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Operator:&lt;/strong&gt; &lt;em&gt;A programming language construct that works like a function, but have syntactic or semantic differences.&lt;/em&gt; &lt;a href=&#34;http://en.wikipedia.org/wiki/Operator_(computer_programming&#34;&gt;Wikipedia article&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;numbers-in-ruby:e187389743e8f048f4fab6fb26282989&#34;&gt;Numbers in Ruby&lt;/h3&gt;

&lt;p&gt;Ruby allows us to work with a variety of number systems, including decimal (integers and floats), binary, hexadecimal, and others. Integers can be any whole number. Floats can be any floating point number (containing a decimal), but &lt;em&gt;cannot&lt;/em&gt; begin with a decimal - you must use a leading zero (e.g. 0.1234, not .1234). Binary numbers must begin with 0b (e.g. 0b1010) and hexadecimal numbers must begin with 0x (e.g. 0x10AF). We can create negative numbers by using the unary negative &amp;lsquo;-&amp;rsquo; operator (a positive value is always assumed, but you can specify the unary positive &amp;lsquo;+&amp;rsquo; operator, if you wish). &lt;a href=&#34;http://en.wikipedia.org/wiki/Unary_operation&#34;&gt;Wikipedia article on unary operations&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;From IRB, let&amp;rsquo;s see number literals in action.&lt;/p&gt;

&lt;p&gt;``` irb Number literals in different number systems
irb(main):001:0&amp;gt; 42
=&amp;gt; 42
irb(main):002:0&amp;gt; 4321
=&amp;gt; 4321
irb(main):003:0&amp;gt; 6.28319
=&amp;gt; 6.28319
irb(main):004:0&amp;gt; 0b101010
=&amp;gt; 42
irb(main):005:0&amp;gt; 0x10E1
=&amp;gt; 4321
irb(main):006:0&amp;gt; .28319
SyntaxError: (irb):6: no .&lt;digit&gt; floating literal anymore; put 0 before dot
.28319
 ^
(irb):6: syntax error, unexpected &amp;lsquo;.&amp;rsquo;
.28319
 ^
        from &lt;your IRB path here&gt;:12:in &amp;lsquo;&lt;main&gt;&amp;lsquo;
irb(main):007:0&amp;gt; 0.28319
=&amp;gt; 0.28319
irb(main):008:0&amp;gt; -42
=&amp;gt; -42
irb(main):009:0&amp;gt; +42
=&amp;gt; 42
irb(main):010:0&amp;gt; -4321
=&amp;gt; -4321
irb(main):011:0&amp;gt; -6.28319
=&amp;gt; -6.28319
irb(main):012:0&amp;gt; -0b101010
=&amp;gt; -42
irb(main):013:0&amp;gt; -0x10E1
=&amp;gt; -4321&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
#### Arithmetic Operators

Ruby provides the standard arithmetic operations of addition, subtraction, multiplication, division, remainder (modulo), and exponention through the binary operators &#39;+&#39;, &#39;-&#39;, &#39;\*&#39;, &#39;/&#39;, &#39;%&#39;, &#39;\*\*&#39;, respectively.

From IRB, let&#39;s see the arithmetic operators in action.

``` irb Arithmetic operators
irb(main):014:0&amp;gt; 24 + 18
=&amp;gt; 42
irb(main):015:0&amp;gt; 4321 - 1234
=&amp;gt; 3087
irb(main):016:0&amp;gt; -42 + 6.28319
=&amp;gt; -35.71681
irb(main):017:0&amp;gt; 0b101010 * 2
=&amp;gt; 84
irb(main):018:0&amp;gt; 0x10E1 / -2
=&amp;gt; -2161
irb(main):019:0&amp;gt; 42.0 / 4
=&amp;gt; 10.5
irb(main):020:0&amp;gt; 42 / 4
=&amp;gt; 10
irb(main):021:0&amp;gt; 42 % 4
=&amp;gt; 2
irb(main):022:0&amp;gt; 2 ** 2
=&amp;gt; 4
irb(main):023:0&amp;gt; 2 ** 3
=&amp;gt; 8
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see, Ruby is smart enough to the data type of a given number (integer, float, etc.) and allows you to combine different number systems within the same arithmetic operation.&lt;/p&gt;

&lt;h4 id=&#34;converting-numbers-to-strings:e187389743e8f048f4fab6fb26282989&#34;&gt;Converting Numbers to Strings&lt;/h4&gt;

&lt;p&gt;As covered in &lt;a href=&#34;{{ root_url }}/2014/03/a-ruby-primer-part-4-outputting-and-inputting-data/&#34;&gt;Part 4&lt;/a&gt; of this primer, we can use the &lt;code&gt;to_s&lt;/code&gt; method to convert any number to a string. We can also use parenthesis to group operations and convert the result into a string. Part 4 also covers the &lt;code&gt;to_i&lt;/code&gt; and &lt;code&gt;to_f&lt;/code&gt; methods, which we won&amp;rsquo;t rehash here.&lt;/p&gt;

&lt;p&gt;``` irb Converting numbers to strings
irb(main):024:0&amp;gt; 42.to_s
=&amp;gt; &amp;ldquo;42&amp;rdquo;
irb(main):025:0&amp;gt; 4321.to_s
=&amp;gt; &amp;ldquo;4321&amp;rdquo;
irb(main):026:0&amp;gt; 6.28319.to_s
=&amp;gt; &amp;ldquo;6.28319&amp;rdquo;
irb(main):027:0&amp;gt; 0b101010.to_s
=&amp;gt; &amp;ldquo;42&amp;rdquo;
irb(main):028:0&amp;gt; 0x10E1.to_s
=&amp;gt; &amp;ldquo;4321&amp;rdquo;
irb(main):029:0&amp;gt; (-0b101010 * 2).to_s
=&amp;gt; &amp;ldquo;-84&amp;rdquo;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
#### Order of Operations

Ruby orders the arithmetic operations just like you would expect. Parentheses can be used to override the standard order of operations.

- Exponentiation (&#39;\*\*&#39;)
- Unary plus (&#39;+&#39;) and minus (&#39;-&#39;)
- Multiplication (&#39;\*&#39;), division (&#39;/&#39;), and modulo (&#39;%&#39;)
- Addition (&#39;+&#39;) and subtraction (&#39;-&#39;)

Below, we are raising 2 to the 4th power (exponentiation), then multiplying -42 by 0x10E1 (hexadecimal 4321), then dividing by -0b101010 (binary -42), and adding all of that to the result of the initial exponentiation.

``` irb Order of operations
irb(main):030:0&amp;gt; 2 ** 4 + -42 * 0x10E1 / -0b101010
=&amp;gt; 4337
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let&amp;rsquo;s override the order of operations with parentheses, and see what happens.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;irb Overring order of operations with parentheses
irb(main):031:0&amp;gt; 2 ** ((4 + -42) * 0x10E1 / -0b101010)
=&amp;gt; 5324183932979082217173830423788624448232377020200871925044363740978552645617392603963657332653293294921533487382005730205842492472324978256389524698133274982954316968418759621851827737904061947651709998777768764044640777451180488447019488349748492015288249539865325121412715328770419801502841515154181645054344997871537357625278584389884882092167456117235962842412534832325361798374338229786121498548414734430752922733207597283706654956923362549302114482188128786150568960200298842155354973238386993145987063220515184400346894462278601827604890618760154083905012744638294036976331341289696738323216673862314043949607110345453655000393965492565350543837806500159501747398630390119445689566142598744356783963943236839177990311764712795015435453751014259414011381595061542051363110034101037226883045394977492273858105094107413813083844023881750262194931436484929958736179968990507461243553811446562638876287908064004870619573393903638752010524471027366924289557008444655821060975285285523655000932375240137129357855653393565053617024444743584021979644805497476255820320767466042088222845247236339159742784704106913314432388396580367715094914656526338930045950563418904868276928512
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s a really large number!!&lt;/p&gt;

&lt;p&gt;Ruby provides many other useful numeric methods. We recommend exploring the Ruby documentation and trying out some of these on your own to gain a better understanding. We will be using various numeric methods throughout the rest of this primer.&lt;/p&gt;

&lt;p&gt;Congratulations! You have learned about some of the basic ways to use the numeric data types, and perform basic arithmetic operations.&lt;/p&gt;

&lt;h3 id=&#34;a-ruby-primer:e187389743e8f048f4fab6fb26282989&#34;&gt;A Ruby Primer&lt;/h3&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/03/a-ruby-primer-part-1-setting-up-your-development-environment/&#34;&gt;Part 1&lt;/a&gt; of this primer, you can learn how to set up your development environment.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/03/a-ruby-primer-part-2-using-the-ruby-interactive-shell-irb/&#34;&gt;Part 2&lt;/a&gt; of this primer, you can explore using the Ruby Interactive Shell (IRB).&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/03/a-ruby-primer-part-3-ruby-scripts/&#34;&gt;Part 3&lt;/a&gt; of this primer, you can learn how to run Ruby programs (scripts).&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/03/a-ruby-primer-part-4-outputting-and-inputting-data/&#34;&gt;Part 4&lt;/a&gt; of this primer, you can learn how to output and input data, as well as how to do simple conversion of strings into integers and floats.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/03/a-ruby-primer-exercise-1-a-simple-command-line-calculator/&#34;&gt;Exercise 1&lt;/a&gt; of this primer, you can learn how to create a simple command line calculator.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/04/a-ruby-primer-part-5-strings/&#34;&gt;Part 5&lt;/a&gt; of this primer, you can learn about strings.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/04/a-ruby-primer-part-6-numbers/&#34;&gt;Part 6&lt;/a&gt; of this primer, you can learn about numbers.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/04/a-ruby-primer-part-7-booleans/&#34;&gt;Part 7&lt;/a&gt; of this primer, you can learn about booleans.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/04/a-ruby-primer-part-8-ranges/&#34;&gt;Part 8&lt;/a&gt; of this primer, you can learn about booleans.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/04/a-ruby-primer-part-9-arrays/&#34;&gt;Part 9&lt;/a&gt; of this primer, you can learn about arrays.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/04/a-ruby-primer-part-10-hashes/&#34;&gt;Part 10&lt;/a&gt; of this primer, you can learn about hashes.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/04/a-ruby-primer-part-11-variables-and-constants/&#34;&gt;Part 11&lt;/a&gt; of this primer, you can learn about variables and constants.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/04/a-ruby-primer-exercise-2-a-random-number-min-max-detector/&#34;&gt;Exercise 2&lt;/a&gt; of this primer, you can learn how to create a program to detect the minimum and maximum values from a collection of randomly generated numbers.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/06/a-ruby-primer-part-12-arithmetic-operators/&#34;&gt;Part 12&lt;/a&gt; of this primer, you can learn about arithmetic operators.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/07/a-ruby-primer-part-13-relational-operators/&#34;&gt;Part 13&lt;/a&gt; of this primer, you can learn about relational operators.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/07/a-ruby-primer-part-14-logical-operators/&#34;&gt;Part 14&lt;/a&gt; of this primer, you can learn about logical operators.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>A Ruby Primer, Part 7 -- Booleans</title>
      <link>http://www.nmcconnell.com/lesson/a-ruby-primer-part-7-booleans/</link>
      <pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>http://www.nmcconnell.com/lesson/a-ruby-primer-part-7-booleans/</guid>
      <description>

&lt;p&gt;If you have not yet set up your development environment, please refer to &lt;a href=&#34;{{ root_url }}/2014/03/a-ruby-primer-part-1-setting-up-your-development-environment/&#34;&gt;Part 1&lt;/a&gt; of this primer.&lt;/p&gt;

&lt;p&gt;If you are unfamiliar with using the Ruby Interactive Shell, please refer to &lt;a href=&#34;{{ root_url }}/2014/03/a-ruby-primer-part-3-ruby-scripts/&#34;&gt;Part 3&lt;/a&gt; of this primer.&lt;/p&gt;

&lt;h3 id=&#34;terms:5a8cd1bef50f73d5f181de054234a378&#34;&gt;Terms&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Boolean:&lt;/strong&gt; &lt;em&gt;A boolean is a data type intended to represent logical truth values.&lt;/em&gt; &lt;a href=&#34;http://en.wikipedia.org/wiki/Boolean_data_type&#34;&gt;Wikipedia article&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Comparison:&lt;/strong&gt; &lt;em&gt;A comparison is an operation that is used to test the inequality of values.&lt;/em&gt; &lt;a href=&#34;http://en.wikipedia.org/wiki/Inequality_(mathematics&#34;&gt;Wikipedia article&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;booleans-in-ruby:5a8cd1bef50f73d5f181de054234a378&#34;&gt;Booleans in Ruby&lt;/h3&gt;

&lt;p&gt;Ruby provides three &lt;a href=&#34;http://www.ruby-doc.org/core-2.1.1/doc/syntax/literals_rdoc.html&#34;&gt;boolean literals&lt;/a&gt; that we can use when making comparisons or in conditional expressions: &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt;, and &lt;code&gt;nil&lt;/code&gt;. (&lt;em&gt;Note that we will discuss conditional expressions later in this primer.&lt;/em&gt;)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;true&lt;/code&gt; is a true value&lt;/li&gt;
&lt;li&gt;&lt;code&gt;false&lt;/code&gt; is a false value&lt;/li&gt;
&lt;li&gt;&lt;code&gt;nil&lt;/code&gt; is a false value and is also used to indicate the absence of data or that the truth value of the data is unknown.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We can assign boolean values to variables, just as we have with &lt;a href=&#34;{{ root_url }}/2014/04/a-ruby-primer-part-6-numbers/&#34;&gt;numeric&lt;/a&gt; and &lt;a href=&#34;{{ root_url }}/2014/04/a-ruby-primer-part-5-strings/&#34;&gt;string&lt;/a&gt; values. We can use the unary negation (&amp;lsquo;!&amp;rsquo;) operator to reverse the truth value of a boolean.&lt;/p&gt;

&lt;p&gt;From IRB, let&amp;rsquo;s see booleans in action.&lt;/p&gt;

&lt;p&gt;``` irb Boolean literals
irb(main):001:0&amp;gt; true
=&amp;gt; true
irb(main):002:0&amp;gt; false
=&amp;gt; false
irb(main):003:0&amp;gt; nil
=&amp;gt; nil
irb(main):004:0&amp;gt; !true
=&amp;gt; false
irb(main):005:0&amp;gt; !false
=&amp;gt; true
irb(main):006:0&amp;gt; !nil
=&amp;gt; true
irb(main):007:0&amp;gt; flag = true
=&amp;gt; true
irb(main):008:0&amp;gt; flag
=&amp;gt; true
irb(main):009:0&amp;gt; !flag
=&amp;gt; false&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
#### Comparison Operators

Ruby provides the standard comparison operations of &#39;is equal to&#39;, &#39;is not equal to&#39;, &#39;is greater than&#39;, &#39;is less than&#39;, &#39;is greater than or equal to&#39;, and &#39;is less than or equal to&#39;, through the binary operators &#39;==&#39;, &#39;!=&#39;, &#39;\&amp;gt;&#39;, &#39;&amp;lt;&#39;, &#39;\&amp;gt;=&#39;, and &#39;&amp;lt;=&#39;, respectively. There are a few others which we will discuss in later parts of this primer.

From IRB, let&#39;s see the comparison operators in action.

``` irb Comparison operators
irb(main):010:0&amp;gt; true == true
=&amp;gt; true
irb(main):011:0&amp;gt; true == false
=&amp;gt; false
irb(main):012:0&amp;gt; true == nil
=&amp;gt; false
irb(main):013:0&amp;gt; false == nil
=&amp;gt; false
irb(main):014:0&amp;gt; true != true
=&amp;gt; false
irb(main):015:0&amp;gt; true != false
=&amp;gt; true
irb(main):016:0&amp;gt; true != nil
=&amp;gt; true
irb(main):017:0&amp;gt; false != nil
=&amp;gt; true
irb(main):018:0&amp;gt; 24 == 42
=&amp;gt; false
irb(main):019:0&amp;gt; 24 != 42
=&amp;gt; true
irb(main):020:0&amp;gt; 24 &amp;gt; 42
=&amp;gt; false
irb(main):021:0&amp;gt; 24 &amp;gt;= 42
=&amp;gt; false
irb(main):022:0&amp;gt; 24 &amp;lt; 42
=&amp;gt; true
irb(main):023:0&amp;gt; 24 &amp;lt;= 42
=&amp;gt; true
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We recommend trying out some of these comparison operations on your own to gain a better understanding. We will be using various boolean literals and comparison operations throughout the rest of this primer.&lt;/p&gt;

&lt;p&gt;Congratulations! You have learned about some of the basic ways to use the boolean data types, and perform basic comparison operations.&lt;/p&gt;

&lt;h3 id=&#34;a-ruby-primer:5a8cd1bef50f73d5f181de054234a378&#34;&gt;A Ruby Primer&lt;/h3&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/03/a-ruby-primer-part-1-setting-up-your-development-environment/&#34;&gt;Part 1&lt;/a&gt; of this primer, you can learn how to set up your development environment.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/03/a-ruby-primer-part-2-using-the-ruby-interactive-shell-irb/&#34;&gt;Part 2&lt;/a&gt; of this primer, you can explore using the Ruby Interactive Shell (IRB).&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/03/a-ruby-primer-part-3-ruby-scripts/&#34;&gt;Part 3&lt;/a&gt; of this primer, you can learn how to run Ruby programs (scripts).&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/03/a-ruby-primer-part-4-outputting-and-inputting-data/&#34;&gt;Part 4&lt;/a&gt; of this primer, you can learn how to output and input data, as well as how to do simple conversion of strings into integers and floats.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/03/a-ruby-primer-exercise-1-a-simple-command-line-calculator/&#34;&gt;Exercise 1&lt;/a&gt; of this primer, you can learn how to create a simple command line calculator.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/04/a-ruby-primer-part-5-strings/&#34;&gt;Part 5&lt;/a&gt; of this primer, you can learn about strings.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/04/a-ruby-primer-part-6-numbers/&#34;&gt;Part 6&lt;/a&gt; of this primer, you can learn about numbers.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/04/a-ruby-primer-part-7-booleans/&#34;&gt;Part 7&lt;/a&gt; of this primer, you can learn about booleans.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/04/a-ruby-primer-part-8-ranges/&#34;&gt;Part 8&lt;/a&gt; of this primer, you can learn about booleans.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/04/a-ruby-primer-part-9-arrays/&#34;&gt;Part 9&lt;/a&gt; of this primer, you can learn about arrays.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/04/a-ruby-primer-part-10-hashes/&#34;&gt;Part 10&lt;/a&gt; of this primer, you can learn about hashes.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/04/a-ruby-primer-part-11-variables-and-constants/&#34;&gt;Part 11&lt;/a&gt; of this primer, you can learn about variables and constants.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/04/a-ruby-primer-exercise-2-a-random-number-min-max-detector/&#34;&gt;Exercise 2&lt;/a&gt; of this primer, you can learn how to create a program to detect the minimum and maximum values from a collection of randomly generated numbers.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/06/a-ruby-primer-part-12-arithmetic-operators/&#34;&gt;Part 12&lt;/a&gt; of this primer, you can learn about arithmetic operators.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/07/a-ruby-primer-part-13-relational-operators/&#34;&gt;Part 13&lt;/a&gt; of this primer, you can learn about relational operators.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;{{ root_url }}/2014/07/a-ruby-primer-part-14-logical-operators/&#34;&gt;Part 14&lt;/a&gt; of this primer, you can learn about logical operators.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>